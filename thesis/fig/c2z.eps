%!PS-Adobe-3.0 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: paper.pdf
%%Creator: Adobe Acrobat 11.0.1
%%For: Lu
%%CreationDate: 2013/7/3, 17:24:32
%%BoundingBox: 63 160 589 461
%%HiResBoundingBox: 0 0 720 540
%%CropBox: 0 0 720 540
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%PageOrder: Ascend
%%Pages: (atend)
%%DocumentProcessColors: (atend)
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 853 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.4-c005 78.147326, 2012/08/23-13:03:03        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   dc:format="application/pdf"
   xmp:CreateDate="2013-07-02T12:53:14+08:00"
   xmp:CreatorTool="Microsoft® PowerPoint® 2010"
   xmp:ModifyDate="2013-07-02T12:53:14+08:00"
   pdf:Producer="Microsoft® PowerPoint® 2010">
   <dc:creator>
    <rdf:Seq>
     <rdf:li>lin</rdf:li>
    </rdf:Seq>
   </dc:creator>
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">PowerPoint 演示文稿</rdf:li>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[{Catalog} {Doc_Metadata} /Metadata pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
<</PageSize [720 540 ] >> setpagedevice
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -540 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 540 li
720 540 li
720 0 li
cp
clp
gsave
0 540 mo
720 540 li
720 0 li
0 0 li
0 540 li
clp
0 540 mo
720 540 li
720 0 li
0 0 li
0 540 li
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
ef
65.164 128.25 mo
87.844 105.57 li
110.52 128.25 li
87.844 150.93 li
cp
/1 
[/DeviceCMYK] /CSA add_res
.0725109 0 .935027 0 cmyk
ef
2 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
65.164 128.25 mo
87.844 105.57 li
110.52 128.25 li
87.844 150.93 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
%ADOBeginSubsetFont: PBAAAA+Calibri,Bold Initial
ct_T42Dict begin
-0.516 -0.305 1.238 0.969
 256 array 0 1 255 {1 index exch /.notdef put} for  /PBAAAA+Calibri,Bold
Type42DictBegin
[<00010000000c000c000c000c4f532f32fc12bbb4000000cc000000606376
74202f4935490000012c000006086670676da1ea42ac0000073400000913
676c7966d1ea5f570000790c0000131868656164e606fe46000010480000
0036686865610d8d071d0000108000000024686d747842a705ed000010a4
000026306c6f6361cf84cc01000036d400001e466d6178701bff16700000
551c000000206e616d658fc48c9b0000553c00000e3470726570c7f0742e
000063700000159c676469720000000000000000000000000003044a02bc
00050008059905330000011e05990533000003d000ba02000800020f0702
030404030204e10002ff4000acff00000009000000004d53202000200000
00a00600fe0001c4079e02262000019f0000000003c0050e000000200003
0000079e0000fe930000000000000000000000810081009c00ab00b500ba
00c100ca00d300f3010a0060008500bf00e300ea00f200fb010001070115
011c01290000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000fe83056d000d03c000060017
0000fffaffe9fea9ffe90000050e000600170000fffaffe9fe93050e0017
0426000600170000fffaffe9ff12ffed050e00170426000600170000fffa
ffe9fe93feb8fece060b0010050e0006001002cbfffafff001edfffa023f
00060010ff36fffafff00287000600100000fffafff0079efeaffe9f0000
0000000000000000000000700072007500780079007a007b007d007e007f
008300860087008800890085007f0086008b008c008d008e008f00900091
00920093009400950096009700980099009a009b009c009d009e009f0092
00930094009b009c009e009e00960099009a009d009e00a200a600a900ac
00a200a300a400a500a700a800a900aa00ab00ac00ae00a300a500a700a8
00aa00ab00ac00ad00ae00a000a100a300a600a700a900aa00ac00ad00af
00af00b000b100b200b300b400b500af00af00b000b200b300b400b500b8
00c000b600b700b800b900ba00bb00bc00bd00be00bf00c000c100c200b9
00ba00bc00bd00bf00c000c100c200b600b700b800b900ba00bb00bc00bd
00be00bf00c000c100c200c000c100c200c300c400c500c600c700c800c9
00ca00cb00cc00cd00ce00cf00c300c400c500c600c700c800c900ca00cb
00cc00cd00ce00cf00c300c400c500c600c700c800c900ca00cb00cc00cd
00ce00cf00c500c800c900ca00cb00ce00cf00d000d100d200d300d400d5
00d600d700d900db00de00df00e000e200e300ec00d000d100d200d300d4
00d500d600d700d800d900da00db00dd00de00df00e000e100e300e500e9
00ec00ed00d100d300d400d500d800d900da00dc00e000e100e800d000d1
00d400d600e000e4010800f5010200fb00ff0108008f0090009600920093
00990090009100970098009a009d00a400a600a700a800a900af009a00a2
00a300a700a900aa00ab00ac00ad00b000ad009b00aa00ab00ad00b0009a
00aa00ac00ad00ae00af00b100b900bb00bc00bd00be00c100c200c300c4
00c500c600c700c800c900ca00cb00ce00b300b400b500b600b700b800bc
00c200c500c800ca00cb00cd00ce00cf00d000c700b700b800b900bb00bc
00be00c600c700c800c900cb00cf00d000b200b600b700c200c400c500c6
00c700cb00cc00cd00ce00cf00d000d100d400d500d700d800d900da00db
00dc00de00df00e000e200e300e500e600d100d300d600d700d800da00db
00dc00dd00de00df00e000e100e200e300e400e500d100d200d400d500da
00db00dd00de00df00e000e100e200e600d200d300d400d700d800dd00de
00e000e100e200e300e400e500e600d200da00e100e900ea00ec00e800e9
00ea00eb00ec00ed00eb00e700ea00eb00ec00ed00e700e900ea00ec00ed
00ee00ef00f500ee00ef00f000f100f200f300f400f500f600ee00f000f2
00ef00f000f100f200f300f400f500f600ee00ef00f000f100f200f300f4
00f500f600f700f700f800f900fa00fb00fc00fd00f700f800f900fa00fb
00fd00f700f800f900fa00fb00fc00fd00fd00fe00ff0100010101020103
00fe010001010102010300fe00ff01000101010201030102010301040105
0106010701080109010a010c010d010e010f011001070104010501060107
01080109010a010b010d010e010f01100111010401050106010701080109
010a010b010c010d010e010f0110011101040105010601070109010e010f
011201130114011501170118011a011b011c011d011e011f012101220112
01130114011501170119011b011c011d011e012001210123012401250113
011401150116011701180119011a011b011c011d011f01200117011c011d
011e012001210129013001770129012b012e012f01300131013401350137
0139012b012d013001320134013a012e01300134013a014200500062006c
00fa05e802cc0114011400a000b140465f5e5d5c5b5a5958555453525150
4f4e4d4c4b4a494847464544434241403f3e3d3c3b3a39383736352f2e2d
2c2826252423221f181411100f0d0b0a090807060504030201002c452346
6020b02660b004262348482d2c452346236120b02661b004262348482d2c
45234660b0206120b04660b004262348482d2c4523462361b0206020b026
61b02061b004262348482d2c45234660b0406120b06660b004262348482d
2c4523462361b0406020b02661b04061b004262348482d2c0110203c003c
2d2c20452320b0cd442320b8015a51582320b08d44235920b0ed51582320
b04d44235920b0042651582320b00d44235921212d2c20204518684420b0
01602045b04676688a4560442d2c01b10b0a432343650a2d2c00b10a0b43
23430b2d2c00b0282370b101283e01b0282370b10228453ab10200080d2d
2c2045b00325456164b050515845441b2121592d2c2045b0004360442d2c
01b00643b00743650a2d2c2069b04061b0008b20b12cc08a8cb810006260
2b0c642364615c58b00361592d2c8a03458a8a87b0112bb0292344b0297a
e4182d2c4565b02c234445b02b23442d2c4b525845441b2121592d2c01b0
05251023208af500b0016023edec2d2c01b005251023208af500b0016123
edec2d2c01b0062510f500edec2d2c20b001600110203c003c2d2c20b001
610110203c003c2d2c00b00743b006430b2d2c21210c6423648bb8400062
2d2c21b08051580c6423648bb82000621bb200402f2b59b002602d2c21b0
c051580c6423648bb81555621bb200802f2b59b002602d2c0c6423648bb8
4000626023212d2c4523456023456023456023766818b08062202d2cb004
26b00426b00425b0042545234520b003266062636820b0032661658a2344
442d2c2045b0005458b040442045b04061441b2121592d2c45b1302f4523
456160b0016069442d2c4b5158b02f2370b01423421b2121592d2c4b5158
20b0032545695358441b2121591b2121592d2c45b01443b0006063b00160
69442d2cb02f45442d2c452320458a60442d2c45234560442d2c4b235158
b90033ffe0b134201bb3330034005944442d2cb0164358b00326458a5864
66b01f601b64b020606620581b21b04059b001615923586559b029234423
10b029e01b2121212121592d2cb0164358b004254564b020606620581b21
b04059b0016123586559b0292344b00425b00725082058021b0359b00525
10b004252046b0042523423cb0072510b006252046b00425b0016023423c
2058011b0059b0052510b00425b029e0b0072510b00625b029e0b00425b0
0725082058021b0359b00425b003254348b00625b00325b0016043481b21
59212121212121212d2cb0164358b004254564b020606620581b21b04059
b0016123581b6559b0292344b00525b00825082058021b0359b0042510b0
05252046b0042523423cb00425b0072508b0072510b006252046b00425b0
016023423c2058011b0059b0042510b00525b029e0b02920456544b00725
10b00625b029e0b00525b00825082058021b0359b00525b003254348b004
25b0072508b00625b00325b0016043481b2159212121212121212d2c02b0
0425202046b004252342b0052508b003254548212121212d2c02b0032520
b0042508b0022543482121212d2c452320451820b0005020582365235923
6820b040505821b04059235865598a60442d2c4b53234b515a5820458a60
441b2121592d2c4b545820458a60441b2121592d2c4b53234b515a58381b
2121592d2cb000214b5458381b2121592d2cb002435458b0462b1b212121
21592d2cb002435458b0472b1b212121592d2cb002435458b0482b1b2121
2121592d2cb002435458b0492b1b212121592d2c208a08234b538a4b515a
5823381b2121592d2c0020b200400325b0062649618b3812342d2c014623
466023466123201020468a61b8ff80628ab140408a704560683a2d2c208a
2349648a2353583c1b21592d2c4b52587d1b7a592d2cb012004b014b5442
2d2cb1020042b123018851b1400188535a58b910000020885458b2020102
43604259b12401885158b920000040885458b2020202436042b124018854
58b2022002436042004b014b5258b2020802436042591bb9400000808854
58b202040243604259b94000008063b80100885458b202080243604259b9
4000010063b80200885458b202100243604259b94000020063b804008854
58b202400243604259595959592d2c451868234b51582320452064b04050
587c59688a6059442d2cb00016b00225b0022501b001233e00b002233eb1
0102060cb00a236542b00b234201b001233f00b002233fb10102060cb006
236542b0072342b00116012d2c20b82000628a6023622d2cb0072558001b
0159b0042510b00325b0022520b8ffff545821cd1bed5921b006255cb006
255a58b0092b5920b005254ab0042547b004254760b0062547b0806361b0
0225b0005558b00325b00725496359b0082558001b0159b00425b0062549
b009255cb009255a58b0092b59b0072546b0806361b0032520b000555863
1b2159612320b0005558b080631b21b08059b0592bb006255c586959b004
25202010b00048233ab0062658001b0159b0052658b003252f598a122332
21212d2cb00625b00a2587b00625b009254ab0005358b00625b00a251bb0
0925b0072559b00225b00225070cb005256323b00625636020b940000400
63535821b00426b00426b00a1bb94000040063655158b0042665b0042665
b00a1bb00426b00426b000b00325b003250b0d0ab0092eb00725b007250b
0d0ab00b2eb00525b0052507595920b0005558b00525b0052587b00725b0
07250bb0092510b00b25b0092620b8ffff545821cd1bed59b00525b00525
07b00825b00b254923b00625b0062587b00a2510b00b25c15920b00051b8
00522378b00161b00225b00725b0072507b00a25b00d254961b08062b005
25b005250bb00a252338b00625b0062587b00825b008250bb00a2510b00b
25c4b00625b0062507b00925b00c2549b0032554b8ffa723792121212121
212121212121212d2c23b0005458b9400000001bb900004000598ab00054
58b9400000001bb90000400059b05b2b2d2c08b0005458b9400000001bb9
00004000590db05b2b2d2c8a8a080d8ab0005458b9400000001bb9000040
0059b05b2b2d2cb00426b00426080db00426b00426080db05b2b2d000001
000000059eb84459c2825f0f3cf50019080000000000bbeb7ccc00000000
c5229872fbdafd8d09ec07c5000100090002000000000000000100000600
fe0001c40aa0fbdafa8609ec0001000000000000000000000000000003f6
040e0000000000000000000001cf00000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000006fe008d000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000044b004b0000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000002d8007e0000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000029b00e6000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000382007900000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000040e005400000000040e003d0000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
040e0094040e0058040e0055040e0024040e0060040e0054040e0051040e
003d00000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000009e
009e009e009e009e009e009e009e009e009e009e009e009e009e009e009e
009e009e009e009e009e009e009e009e009e009e009e009e009e009e009e
009e009e009e009e009e009e009e009e009e009e009e009e009e009e009e
009e009e009e009e009e009e009e009e009e009e009e009e009e009e009e
009e009e009e009e009e009e009e01620162016201620162016201620162
016201620162016201620162016201620162016201620162016201620162
016201620162016201620162016201620162016201620162016201620162
016201620162016201620162016201620162016201620162016201620162
016201620162016201620162016201620162016201620162016201620162
016201620162016201620162016201620162016201620162016201620162
016201620162016201620162016201620162016201620162016201620162
016201620162016201620162016201620162016201620162016201620162
016201620162016201620162016201620162016201620162016201620162
016201620162016201620162016201620162016201620162016201620162
016201620162016201620162016201620162016201620162016201620162
016201620162016201620162016201620162016201620162016201620162
016201620162016201620162016201620162016201620162016201620162
016201620162016201620162016201620162016201620162016201620162
0162016201620162016201620162016201620162016201fe01fe01fe01fe
01fe01fe01fe01fe01fe01fe01fe01fe01fe01fe01fe01fe01fe01fe01fe
01fe01fe01fe01fe01fe01fe01fe01fe01fe01fe01fe01fe01fe01fe01fe
01fe01fe01fe01fe01fe01fe01fe01fe01fe01fe01fe01fe01fe01fe01fe
01fe01fe01fe01fe01fe01fe01fe01fe01fe01fe01fe01fe01fe01fe01fe
01fe01fe01fe01fe01fe01fe01fe01fe01fe01fe01fe01fe01fe01fe01fe
01fe01fe01fe01fe01fe01fe01fe01fe01fe01fe01fe01fe01fe01fe01fe
01fe01fe01fe01fe01fe01fe01fe01fe01fe01fe01fe01fe01fe01fe01fe
01fe01fe01fe01fe01fe027d027d027d027d027d027d027d027d027d027d
027d027d027d027d027d027d027d027d027d027d027d027d027d027d027d
027d027d027d027d027d027d027d027d027d027d027d027d027d027d027d
027d027d027d027d027d027d027d027d027d027d027d027d027d027d027d
027d027d027d027d027d027d027d027d027d027d027d027d027d027d027d
027d027d027d027d027d027d027d027d027d027d027d027d027d027d027d
027d027d027d027d027d027d027d027d027d027d027d027d027d027d027d
027d027d027d027d027d027d027d027d027d027d027d027d027d027d027d
027d027d027d027d027d027d027d027d027d027d027d027d027d027d027d
027d027d027d027d027d027d027d027d027d027d027d027d027d027d027d
027d027d027d027d027d027d027d027d027d027d027d027d027d027d027d
027d027d027d027d027d027d027d027d027d027d027d027d027d027d027d
027d027d027d027d027d027d027d027d027d027d027d027d027d027d027d
027d027d027d027d027d027d027d027d027d027d027d027d027d027d027d
027d027d027d027d027d027d027d027d027d027d027d027d027d027d027d
027d027d027d027d027d027d027d027d027d027d027d027d027d027d027d
027d027d027d027d027d027d027d027d027d027d027d027d027d027d027d
027d027d027d027d027d027d027d027d027d027d027d027d027d027d027d
027d027d027d027d027d027d027d027d027d027d027d027d027d027d027d
027d027d027d027d027d027d027d027d027d027d027d027d027d027d027d
027d027d027d027d027d027d027d027d027d027d027d027d027d027d027d
027d027d027d027d027d027d027d027d027d027d027d027d027d027d027d
027d027d027d027d027d027d027d027d027d027d027d027d027d027d027d
027d027d027d027d027d027d027d027d027d027d027d027d027d027d027d
027d027d027d027d027d027d027d027d027d027d027d027d027d027d027d
027d027d027d027d027d027d027d027d027d027d027d027d027d027d027d
027d027d027d027d027d027d027d027d027d027d027d027d027d027d027d
027d027d027d027d027d027d027d027d027d027d027d027d027d027d027d
027d027d027d027d027d027d027d027d027d027d027d027d027d027d027d
027d027d027d027d027d027d027d027d027d027d027d027d027d027d027d
027d02cb02cb02cb02cb02cb02cb02cb02cb02cb02cb02cb02cb02cb02cb
02cb02cb02cb02cb02cb02cb02cb02cb02cb02cb02cb02cb02cb02cb02cb
02cb02cb02cb02cb02cb02cb02cb02cb02cb02cb02cb02cb02cb02cb02cb
02cb02cb02cb02cb02cb02cb02cb02cb02cb02cb02cb02cb02cb02cb02cb
02cb02cb02cb02cb02cb02cb02cb02cb02cb02cb02cb02cb02cb02cb02cb
02cb02cb02cb031a031a031a031a031a031a031a031a031a031a031a031a
031a031a031a031a031a031a031a031a031a031a031a031a031a031a031a
031a031a031a031a031a031a031a031a031a031a031a031a031a031a031a
031a031a031a031a031a031a031a031a031a03ee03ee04e304e304e304e3
04e304e304e304e304e304e304e304e304e304e304e304e304e304e304e3
04e304e304e304e304e304e304e304e304e304e304e304e304e304e30581
065f0771083108fa09020984098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c098c098c098c098c098c098c098c098c098c098c098c098c
098c098c098c0000000100000f22005900050049000300020010002f0060
00000c63159c000100010000002d02220000000300000000006400000000
000300000001000e006400000003000000020008032a0000000300000003
003a030400000003000000040018031a00000003000000050018033e0000
00030000000600180356000000030000000700fa036e0000000300000008
002a03e4000000030000000900200468000000030000000a02a000640000
00030000000b00560488000000030000000c002a04de000000030000000d
02980508000000030000000e006c07a000010000000000000032080c0001
0000000000010007083e0001000000000002000409a10001000000000003
001d098e0001000000000004000c09990001000000000005000c09ab0001
000000000006000c09b70001000000000007007d09c30001000000000008
001509fe000100000000000900100a40000100000000000a0150083e0001
00000000000b002b0a50000100000000000c00150a7b000100000000000d
014c0a90000100000000000e00360bdc0003000104090000006400000003
000104090001000e006400030001040900020008032a0003000104090003
003a030400030001040900040018031a00030001040900050018033e0003
00010409000600180356000300010409000700fa036e0003000104090008
002a03e4000300010409000900200468000300010409000a02a000640003
00010409000b00560488000300010409000c002a04de000300010409000d
02980508000300010409000e006c07a000a9002000320030003000380020
004d006900630072006f0073006f0066007400200043006f00720070006f
0072006100740069006f006e002e00200041006c006c0020005200690067
006800740073002000520065007300650072007600650064002e00430061
006c0069006200720069002000690073002000610020006d006f00640065
0072006e002000730061006e007300200073006500720069006600200066
0061006d0069006c00790020007700690074006800200073007500620074
006c006500200072006f0075006e00640069006e006700730020006f006e
0020007300740065006d007300200061006e006400200063006f0072006e
006500720073002e00200049007400200066006500610074007500720065
00730020007200650061006c0020006900740061006c006900630073002c
00200073006d0061006c006c00200063006100700073002c00200061006e
00640020006d0075006c007400690070006c00650020006e0075006d0065
00720061006c00200073006500740073002e002000490074007300200070
0072006f0070006f007200740069006f006e007300200061006c006c006f
00770020006800690067006800200069006d007000610063007400200069
006e002000740069006700680074006c007900200073006500740020006c
0069006e006500730020006f0066002000620069006700200061006e0064
00200073006d0061006c006c0020007400650078007400200061006c0069
006b0065002e002000430061006c0069006200720069002700730020006d
0061006e0079002000630075007200760065007300200061006e00640020
0074006800650020006e0065007700200072006100730074006500720069
0073006500720020007400650061006d00200075007000200069006e0020
006200690067006700650072002000730069007a0065007300200074006f
002000720065007600650061006c002000610020007700610072006d0020
0061006e006400200073006f006600740020006300680061007200610063
007400650072002e004d006900630072006f0073006f00660074003a0020
00430061006c006900620072006900200042006f006c0064003a00200032
00300030003500560065007200730069006f006e00200035002e00360032
00430061006c0069006200720069002d0042006f006c006400430061006c
006900620072006900200069007300200065006900740068006500720020
006100200072006500670069007300740065007200650064002000740072
006100640065006d00610072006b0020006f007200200061002000740072
006100640065006d00610072006b0020006f00660020004d006900630072
006f0073006f0066007400200043006f00720070006f0072006100740069
006f006e00200069006e002000740068006500200055006e006900740065
0064002000530074006100740065007300200061006e0064002f006f0072
0020006f007400680065007200200063006f0075006e0074007200690065
0073002e004c007500630028006100730029002000640065002000470072
006f006f00740068007400740070003a002f002f007700770077002e006d
006900630072006f0073006f00660074002e0063006f006d002f00740079
0070006f006700720061007000680079002f006300740066006f006e0074
00730068007400740070003a002f002f0066006f006e0074006600610062
00720069006b002e0063006f006d0059006f00750020006d006100790020
0075007300650020007400680069007300200066006f006e007400200061
00730020007000650072006d006900740074006500640020006200790020
007400680065002000450055004c004100200066006f0072002000740068
0065002000700072006f006400750063007400200069006e002000770068
0069006300680020007400680069007300200066006f006e007400200069
007300200069006e0063006c007500640065006400200074006f00200064
006900730070006c0061007900200061006e00640020007000720069006e
007400200063006f006e00740065006e0074002e00200059006f00750020
006d006100790020006f006e006c0079002000280069002900200065006d
0062006500640020007400680069007300200066006f006e007400200069
006e00200063006f006e00740065006e0074002000610073002000700065
0072006d0069007400740065006400200062007900200074006800650020
0065006d00620065006400640069006e0067002000720065007300740072
0069006300740069006f006e007300200069006e0063006c007500640065
006400200069006e0020007400680069007300200066006f006e0074003b
00200061006e006400200028006900690029002000740065006d0070006f
0072006100720069006c007900200064006f0077006e006c006f00610064
0020007400680069007300200066006f006e007400200074006f00200061
0020007000720069006e0074006500720020006f00720020006f00740068
006500720020006f00750074007000750074002000640065007600690063
006500200074006f002000680065006c00700020007000720069006e0074
00200063006f006e00740065006e0074002e0068007400740070003a002f
002f007700770077002e006d006900630072006f0073006f00660074002e
0063006f006d002f007400790070006f006700720061007000680079002f
0066006f006e00740073002f00640065006600610075006c0074002e0061
007300700078a92032303038204d6963726f736f667420436f72706f7261
74696f6e2e20416c6c205269676874732052657365727665642e43616c69
6272692069732061206d6f6465726e2073616e732073657269662066616d
696c79207769746820737562746c6520726f756e64696e6773206f6e2073
74656d7320616e6420636f726e6572732e20497420666561747572657320
7265616c206974616c6963732c20736d616c6c20636170732c20616e6420
6d756c7469706c65206e756d6572616c20736574732e204974732070726f
706f7274696f6e7320616c6c6f77206869676820696d7061637420696e20
74696768746c7920736574206c696e6573206f662062696720616e642073
6d616c6c207465787420616c696b652e2043616c696272692773206d616e
792063757276657320616e6420746865206e657720726173746572697365
72207465616d20757020696e206269676765722073697a657320746f2072
657665616c2061207761726d20616e6420736f6674206368617261637465
722e4d6963726f736f66743a2043616c6962726920426f6c643a20323030
3556657273696f6e20352e363243616c696272692d426f6c6443616c6962
726920697320656974686572206120726567697374657265642074726164
656d61726b206f7220612074726164656d61726b206f66204d6963726f73
6f667420436f72706f726174696f6e20696e2074686520556e6974656420
53746174657320616e642f6f72206f7468657220636f756e74726965732e
4c7563286173292064652047726f6f74687474703a2f2f7777772e6d6963
726f736f66742e636f6d2f7479706f6772617068792f6374666f6e747368
7474703a2f2f666f6e7466616272696b2e636f6d596f75206d6179207573
65207468697320666f6e74206173207065726d6974746564206279207468
652045554c4120666f72207468652070726f6475637420696e2077686963
68207468697320666f6e7420697320696e636c7564656420746f20646973
706c617920616e64207072696e7420636f6e74656e742e20596f75206d61
79206f6e6c792028692920656d626564207468697320666f6e7420696e20
636f6e74656e74206173207065726d69747465642062792074686520656d
62656464696e67207265737472696374696f6e7320696e636c7564656420
696e207468697320666f6e743b20616e6420286969292074656d706f7261
72696c7920646f776e6c6f6164207468697320666f6e7420746f20612070
72696e746572206f72206f74686572206f75747075742064657669636520
746f2068656c70207072696e7420636f6e74656e742e687474703a2f2f77
77772e6d6963726f736f66742e636f6d2f7479706f6772617068792f666f
6e74732f64656661756c742e61737078b10903b802f9b21e1d1fb802f8b2
1e2b1fb802f7b21e2c1fb802f6b21e2c1fb802f5b21e2c1fb802f4b21e2b
1fb802f3b21e2c1fb802f2b21e2c1fb802f1b21e2c1fb802f0b21e2c1fb8
02efb21e2c1fb802eeb21e2b1fb802edb21e2b1fb802ecb21e2c1fb802eb
b21e2c1fb802eab21e2c1fb802e9b21e2c1fb802e8b21e2c1fb802e7b21e
2c1fb802e6b21e2c1fb802e5b21e2c1fb802e4b21e091fb802e3b21e2c1f
b802e2b21e2c1fb802e1b21d121fb802e0b21d191fb802dfb21d2f1fb802
deb21d2f1fb802ddb21d2f1fb802dcb21d2f1fb802dbb21d191fb802dab2
1d2f1fb802d9b21d2f1fb802d8b21d2f1fb802d7b21d2f1fb802d6b21d2f
1fb802d5b21d2f1fb802d4b21d2f1fb802d3b21d2f1fb802d2b21d2f1fb8
02d1b21d2f1fb802d0b21d2f1fb802cfb21d2f1fb802ceb21d121fb802cd
b21d121fb802ccb21d121fb802cbb21d121fb802cab21d191fb802c9b21d
2f1fb802c8b21d2f1fb802c7b21d2f1fb802c6b21d2f1fb802c5b21d2f1f
b802c4b21d2f1fb802c3b21d2f1fb802c2b21d2f1fb802c1b21d2f1fb802
c0b21d2f1fb802bfb21d121fb802beb21d121fb802bdb21d2f1fb802bcb2
1d2f1fb802bbb21d2f1fb802bab21d2f1fb802b9b21d2f1fb802b8b21d2f
1fb802b7b21d2f1fb802b6b21d2f1fb802b5b21d2f1fb802b4b21d2f1fb8
02b3b21d2f1fb802b2b21d2f1fb802b1b21c321fb802b0b21c321fb802af
b21c331fb802aeb21c331fb802adb21c331fb802acb21c331fb802abb21c
331fb802aab21c311fb802a9b21c311fb802a8b21c321fb802a7b21c321f
b802a6b21c321fb802a5b21c321fb802a4b21c321fb802a3b21c321fb802
a2b21c331fb802a1b21c331fb802a0b21c331fb8029fb21c331fb8029eb2
1c331fb8029db21c331fb8029cb21c311fb8029bb21c311fb8029ab21c32
1fb80299b21c321fb80298b21c321fb80297b21c321fb80296b21c321fb8
0295b21c331fb80294b21c331fb80293b21c331fb80292b21c331fb80291
b21c331fb80290b21c331fb8028fb21c331fb8028eb21c311fb8028db21c
321fb8028cb21c321fb8028bb21c321fb8028ab21c321fb80289b21c321f
b80288b21c331fb80287b21c331fb80286b21c331fb80285b21c331fb802
84b21c331fb80283b21c331fb80282b21b341fb80281b21b341fb80280b2
1b341fb8027fb21b341fb8027eb21b341fb8027db21b341fb8027cb21b34
1fb8027bb21b341fb8027ab21b341fb80279b21b341fb80278b21b341fb8
0277b21b341fb80276b21b341fb80275b21b341fb80274b21b341fb80273
b21b341fb80272b21b341fb80271b21b341fb80270b21b341fb8026fb21a
351fb8026eb21a351fb8026db21a351fb8026cb21a351fb8026bb21a351f
b8026ab21a351fb80269b21a351fb80268b21a351fb80267b21a351fb802
66b21a351fb80265b21a351fb80264b21a351fb80263b21a351fb80262b2
1a351fb80261b21a351fb80260b21a351fb8025fb21a351fb8025eb21a35
1fb8025db21a351fb8025cb21a351fb8025bb21a351fb8025ab21a351fb8
0259b219371fb80258b219371fb80257b219371fb80256b219371fb80255
b219371fb80254b219371fb80253b219371fb80252b219371fb80251b219
371fb80250b219371fb8024fb219371fb8024eb219371fb8024db219371f
b8024cb219371fb8024bb219371fb8024ab219371fb80249b219371fb802
48b219371fb80247b219371fb80246b219371fb80245b219371fb80244b2
19371fb80243b219371fb80242b219371fb80241b219371fb80240b21937
1fb8023fb219371fb8023eb219371fb8023db219371fb8023cb219371fb8
023bb219371fb8023ab219371fb80239b218391fb80238b218391fb80237
b218391fb80236b218391fb80235b218391fb80234b218391fb80233b218
391fb80232b218391fb80231b218391fb80230b218391fb80301b2182e1f
b8022fb218391fb8022eb218391fb8022db218391fb8022cb218391fb802
2bb218391fb8022ab218391fb80229b218391fb80228b218391fb80227b2
18391fb80226b218391fb80225b2173b1fb80224b2173b1fb80223b21732
1fb80222b2173a1fb80221b2173b1fb80220b2173b1fb8021fb2173b1fb8
021eb2173b1fb8021db2173b1fb8021cb2173b1fb8021bb2173b1fb8021a
b2173b1fb80219b2173b1fb80218b2173b1fb80217b2173b1fb80216b217
3b1fb80215b217321fb80214b2173a1fb80213b2173b1fb80212b2173b1f
b80211b2173b1fb80210b2173b1fb8020fb2173b1fb8020eb2173b1fb802
0db2173b1fb8020cb2173b1fb8020bb2173b1fb8020ab2173b1fb80209b2
17321fb80208b217321fb80207b2173b1fb80206b2173b1fb80205b2173b
1fb80204b2173b1fb80203b2173b1fb80202b2173b1fb80201b2173b1fb8
0200b2173b1fb801ffb2173b1fb801feb2173b1fb801fdb2173b1fb801fc
b2173b1fb801fbb2173b1fb801fab2173b1fb801f9b2173b1fb801f8b217
3b1fb801f7b217321fb801f6b2173a1fb801f5b2173b1fb801f4b2173b1f
b801f3b2173b1fb801f2b2173b1fb801f1b2173b1fb801f0b2173b1fb801
efb2173b1fb801eeb2173b1fb801edb2173b1fb801ecb2173b1fb801ebb2
173b1fb801eab2173b1fb801e9b2173b1fb801e8b2173b1fb801e7b21732
1fb801e6b216231fb801e5b216231fb801e4b216371fb801e3b216371fb8
01e2b216381fb801e1b216381fb801e0b216431fb801dfb216441fb801de
b216441fb801ddb216441fb801dcb216451fb801dbb216461fb801dab216
461fb801d9b216461fb801d8b216231fb801d7b216231fb801d6b216381f
b801d5b216431fb801d4b216431fb801d3b216431fb801d2b216441fb801
d1b216461fb801d0b216461fb801cfb216461fb801ceb216461fb801cdb2
16461fb801ccb216461fb801cbb216431fb801cab216231fb801c9b21623
1fb801c8b216371fb801c7b216371fb801c6b216381fb801c5b216421fb8
01c4b216431fb801c3b216441fb801c2b216451fb801c1b216461fb801c0
b216461fb801bfb216461fb801beb216461fb801bdb216461fb801bcb216
461fb801bbb216461fb801bab216371fb801b9b216381fb801b8b216421f
b801b7b216431fb801b6b216431fb801b5b216431fb801b4b216441fb801
b3b216441fb801b2b216441fb801b1b216451fb801b0b216451fb801afb2
16451fb801aeb216461fb801adb216461fb801acb216461fb801abb21646
1fb801aab216461fb801a9b215341fb801a8b215411fb801a7b215411fb8
01a6b2154d1fb801a5b2154e1fb801a4b2154f1fb801a3b215521fb801a2
b215401fb801a1b2154d1fb801a0b2154e1fb8019fb2154f1fb8019eb215
521fb8019db2154d1fb8019cb215401fb8019bb2154d1fb8019ab2154e1f
b80199b2154e1fb80198b2154f1fb80197b2154f1fb80196b215501fb801
95b215521fb80194b215521fb80193b215521fb80192b215411fb80191b2
154f1fb80190b215501fb8018fb215501fb8018eb215511fb8018db21552
1fb8018cb215521fb8018bb215521fb8018ab214581fb80189b214591fb8
0188b2145c1fb80187b2145d1fb80186b2144a1fb80185b2145b1fb80184
b2145c1fb80183b214591fb80182b2145d1fb8018140af145d1ff00f451f
ef0e481fe00c4e1fc20c4e1fc10c4e1fc00c4e1fbf0b561fb20b561fb10b
561fb00b561faf0b561fae0b561fad0b561fac0b561fab0b561faa0b561f
a90b561fa80b561fa70b561fa60b561fa50b561fa40b561fa30b561fa20b
561fa10b561fa00b561f9f0b561f9e0a681f9a0a681f990a681f980a681f
970a681f960a681f950a681f940a681f930a681f920a681f910a681f9009
681f8f09681f8e09681f8d09681f8c09681f410902fc02fa0056001f02fb
02fa0068001f017fb213321fb8017eb212371fb80174b212371fb80173b2
11421fb80172b211421fb80171b211421fb80170b211421fb8016fb21142
1fb8016eb211421fb8016db211421fb8016cb211421fb8016bb211421fb8
016ab211421fb8013cb211421fb8013bb210421fb8013ab210421fb80139
b210421fb80138b210421fb80137b210421fb80136b210421fb80135b210
421fb80134b210421fb80133b210421fb80132b20f451fb80131b20f451f
b80130b20f451fb80112b20f451fb80111b20f451fb80110b20f451fb801
0fb20f451fb8010eb20f451fb8010db20e481fb8010cb20e481fb8010bb2
0e481fb8010ab20e481fb80109b20e481fb80108b20e481fb80107b20d4a
1fb80106405b0d4a1fee0d4a1fed0d4a1fec0d4a1feb0d4a1fea0d4a1fe9
0c4e1fdf0c4e1fde0c4e1fdd0c4e1fdc0c4e1fdb0c4e1fda0c4e1fd90b56
1fd80b561fd70b561fbe0b561fbd0b561fbc0b561fbb0b561fba0b561f9d
0a681f9c0a681fb80180b213321fb8017ab211401fb80179b211421fb801
78b211421fb80177b211421fb80176b211421fb80175b211421fb80143b2
11421fb80142b210421fb80141b210421fb80140b210421fb8013fb21042
1fb8013eb210421fb8013db20f451fb80115b20f451fb80114b20f451fb8
0113b20f451fb903030302b2401fa4be030200b4030200c4030200030300
b213321fb8017bb213321fb80153b212371fb80152b211401fb80151b211
401fb80150b211401fb8014fb211401fb8014eb211401fb8014db211401f
b8014cb211401fb8014bb211401fb8014ab211401fb80149b211401fb801
48b211401fb80147b211401fb80146b211401fb80145b211401fb80144b2
11401fb80122b211401fb80121b210421fb80120b210421fb8011fb21042
1fb8011eb210421fb8011db210421fb8011cb210421fb8011bb210421fb8
011ab210421fb80119b210421fb80118b20f451fb80117b20f451fb80116
409b0f451ffd0f451ffc0f451ffb0f451ffa0f451ff90e481ff80e481ff7
0e481ff60e481ff50e481ff40e481ff30d4a1ff20d4a1ff10d4a1fe70d4a
1fe60d4a1fe50d4a1fe40d4a1fe30d4a1fe20d4a1fe10c4e1fcd0c4e1fcc
0c4e1fcb0c4e1fca0c4e1fc90c4e1fc80c4e1fc70c4e1fc60c4e1fc50c4e
1fc40c4e1fc30c4e1fb80c4e1fb70b561fb60b561fb50b561fb40b561fb3
0b561f9b0a681fb802fdb212371fb8017db212371fb8017cb212371fb801
69b2112e1fb80168b2112e1fb80167b211401fb80166b211401fb80165b2
11401fb80164b211401fb80163b211401fb80162b211401fb80161b21140
1fb80160b211401fb8015fb211401fb8015eb211401fb8015db211401fb8
015cb211401fb8015bb211401fb8015ab211401fb80159b211401fb80158
b211401fb80157b211401fb80156b211401fb80155b211401fb80154b211
401fb8012fb211401fb8012eb210421fb8012db210421fb8012cb210421f
b8012bb210421fb8012ab210421fb80129b210421fb80128b210421fb801
27b210421fb80126b210421fb80125b20f451fb80124b20f451fb80123b2
0f451fb80105b20f451fb80104b20f451fb80103b20f451fb80102b20f45
1fb80101b20e481fb8010040a20e481fff0e481ffe0e481fe80c4e1fd60c
4e1fd50c4e1fd40c4e1fd30c4e1fd20c4e1fd10c4e1fd00c4e1fcf0c4e1f
ce0b561fb90b561f8503251f84032e1f83012e1f8248805581ab80557f48
7d557eab7d550b7d3b7d4b7d030b7d1b7d4b7d7b7dab7ddb7d067c487a55
7bab7a55047a147a020a7948775578ab77550b77010c764875555475e475
f4750314755475647574759475d475e47507a475b475c47503b8ffc04012
75383b46807590750214757475020075010fb8ffc04021750b0e46744872
5573ab725504723472023bf47201e07201023072015072607202b8ffc0b3
72242846b8ffc0403572161a461072307240720371486f5570ab6f554f6f
6f6f7f6f9f6fbf6f057f6f8f6f02af6fbf6f02406f090d466e486d55df6d
0100bc02ff001002ff00c002ffb2030a6fbb02fe000100ef02fe40ff016b
032e1f6a03251f692e675568ab6755662e645565ab6455632e6255612e60
555f2e5d555eab5d555c2e5a555bab5a55592e58555703251f562e545555
ab5455532e515552ab51554f2e4e554e03251f4d2e4b554cab4b554a2e48
5549ab4855504801472e46554503361f001f01001e01001e701e801ef01e
040b601d701d02701de01df01d03701cf01c027f1b010f1a7f1a8f1a030f
1a8f1a020f1a8f1a020f191f198f199f19af19050f198f199f19030c7012
801202701180110230114011d011e011040011a011020f8f0f9f0faf0f03
4f0f5f0fef0fff0f04af0f01af0ebf0ecf0e034f0e5f0e6f0e030f0eaf0e
bf0e0310400e2e31460f0d1f0d40472f0d033c2f0d3f0d4f0d038f0d0140
0d2e3246400d2427463f0c4f0c5f0c039f0c01400c262946ef0aff0a0240
0a242746ef09ff0902ff09010003012001010001100120010308b8ffc0b3
01151f46b80100b316010501b80190b154532b2b4bb807ff524bb008505b
b00188b02553b00188b040515ab00688b000555a5b58b101018e59b10102
4354b0144b515a58b101018e59858d8d00421d4bb01d5358b0a01d594bb0
805358b0401d594bb0ff5358b0001db1160042592b5e73757373742b732b
73742b2b73745e732b5e7374757374755e73747573015e73747374757574
73745e737473002b2b732b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b73745e73732b2b7374752b2b732b2b73755f75755e732b2b2b5e
7373732b7374752b5e732b2b5e732b2b73742b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b732b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b012b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b185f5e00>
[4889 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
1 2502 1005 <00010094000003b00517002e00b5b10102435558400d0929010928010827
0101120130b8ffc040090f024d403001030029b80292b31e180b11b8ffde
b50f024d111312b8017d40092352290f10010b0510b8012bb24006540018
3f1a4ded5f5e5d323ffdcd012f2bcdc433fdcd31305f5d2b005d015d5d5d
1b4018292801292901092901092801082701011201403001031312b8017d
40092352290f10010b0510b8012bb240065400183f1a4ded5f5e5d323ffd
cd3130015f5d005d015d5d5d5d5d5925140e022321222e0235343e023333
11070606262635343e0237253e0333321e02151133321e0203b0060b0e09
fd36080e0b06050b0e09f1d0171d110602080e0c0116050f18271f262f18
08d3090f0b05641c27170a0a17271c1d27180b034a730b05112a26181f16
0e08b40405030103070c09fbd30b1827>PBAAAA+Calibri,Bold AddT42Char 
1 0 0 <00050000fe7303db050e000300070039004d004e0054bc000d019d001700
3a01cbb44444082d07be019d0002002001cb00080001019d401304020d1b
1b3f2335068c035111493f078c0254003ffddeddc63ffddecd12392fcd01
2fddedd6ed10fdc611392fedd4ed3130011121110111211101140e020707
060623222e02352726363333323e0235342623220e0223222e0235343637
3e0333321e0203140e0223222e0235343e0233321e020103dbfc4f0345fd
240279213b533105012b25171f130808031f1e0d2533200f4b4d2336281a
05040806030508072736422355774a22ce0a18271c1d27180a0a18271d1c
27180afdc2050efaf2050efb570444fbbc02e839583e2406790d0b020509
089d281e1524311c3d4b0d0f0d050e1b171a1c0708110e0a2a4861fd991a
25170a0a17251a1c25180a0a1825fd3b>PBAAAA+Calibri,Bold AddT42Char 
PBAAAA+Calibri,Bold /CharStrings get begin
/one 1005 def
end
PBAAAA+Calibri,Bold /Encoding get
dup 49 /one put
pop
end
%ADOEndSubsetFont
/PBGSHX+Calibri,Bold /PBAAAA+Calibri,Bold findfont ct_VMDictPut
/PBGSHX+Calibri,Bold*1 
[49{/.notdef}rp /one 206{/.notdef}rp]
PBGSHX+Calibri,Bold nf
PBGSHX+Calibri,Bold*1 [18 0 0 -18 0 0 ]msf
83.712 134.28 mo
(1)sh
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: PBAAAA+Calibri,Bold AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBGSHX+Calibri,Bold gcheck setglobal} if

1 0 3 <> PBGSHX+Calibri,Bold AddT42Char 
PBGSHX+Calibri,Bold /CharStrings get begin
/space 3 def
end
PBGSHX+Calibri,Bold /Encoding get
dup 32 /space put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/PBGSHX+Calibri,Bold*1 
[32{/.notdef}rp /space 16{/.notdef}rp /one 206{/.notdef}rp]
PBGSHX+Calibri,Bold nf
PBGSHX+Calibri,Bold*1 [18 0 0 -18 0 0 ]msf
92.832 134.28 mo
( )sh
133.2 128.25 mo
155.88 105.57 li
178.56 128.25 li
155.88 150.93 li
cp
.0725109 0 .935027 0 cmyk
ef
133.2 128.25 mo
155.88 105.57 li
178.56 128.25 li
155.88 150.93 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
%ADOBeginSubsetFont: PBAAAA+Calibri,Bold AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBGSHX+Calibri,Bold gcheck setglobal} if
1 2818 1006 <00010058000003bc0525003e0112b10102435558400e042c01042b01093a
010939010b40b8ffc0b60f024d00400116b802eeb633253325330039ba02
ee000bffea400a0f024d000b010f030b2ab80169b61138392020391bb8ff
e8b30b014d1bb8ffe8b40b0f014c1bb80169400d3316062e531039180b0f
014c39b80159b240065400183f1a4ded2b323f123939ed2b2b11392f1239
39ed012f5f5e5d2bedcd39392f2f10ed31305d2b005e5d5d015d5d1b4013
042c01042b01093a010939010b0040010f032ab80169b61138392020391b
b8ffe8b30b014d1bb8ffe8b40b0f014c1bb80169400d3316062e53103918
0b0f014c39b80159b240065400183f1a4ded2b323f123939ed2b2b11392f
123939ed3130015f5e5d005e5d5d015d5d5925140e022321222e0235343e
0237373e0335342e0223220e0223222e0235343e0633321e0215140e0207
0721321e0203bc050a100afd181620140906101914e043522e1115293e2a
3b5b452e0d090d080503060a194362764065976431184c8a729701fe0a11
0c066b1d291a0b08172c23212f252315f046735f5024213b2c191e251f0c
1c2f22171f171118252318335b7d483f7a8dab719b0c1929>PBGSHX+Calibri,Bold AddT42Char 
PBGSHX+Calibri,Bold /CharStrings get begin
/two 1006 def
end
PBGSHX+Calibri,Bold /Encoding get
dup 50 /two put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/PBGSHX+Calibri,Bold*1 
[32{/.notdef}rp /space 16{/.notdef}rp /one /two 205{/.notdef}rp]
PBGSHX+Calibri,Bold nf
PBGSHX+Calibri,Bold*1 [18 0 0 -18 0 0 ]msf
151.78 134.28 mo
(2)sh
1 /0 /CSD get_res sepcs
1 sep
PBGSHX+Calibri,Bold*1 [18 0 0 -18 0 0 ]msf
160.9 134.28 mo
( )sh
201.24 128.25 mo
223.92 105.57 li
246.6 128.25 li
223.92 150.93 li
cp
.0725109 0 .935027 0 cmyk
ef
201.24 128.25 mo
223.92 105.57 li
246.6 128.25 li
223.92 150.93 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
%ADOBeginSubsetFont: PBAAAA+Calibri,Bold AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBGSHX+Calibri,Bold gcheck setglobal} if
1 3262 1007 <00010055ffe903b6052500580141b10102435558b70847010a46010b5ab8
ffc0b60f024d005a0131b802c9400d4e53264e40264e4e2640030e1bba02
e90000ffe8b40f024d000eb8ffe8400a0f024d000e010f030e45bb015600
3b0009015eb6113b113b111636b8ffe8b30b014d36b8ffe8b40b0f014c36
b80155b249532cb801044011202005495316180b014d16180b0f014c16b8
0156b240055600183f1a4ded2b2b3f12392fed3910ed2b2b1139392f2f10
ed10ed012f5f5e5d2bd42bed1217392f2f2f11123910ed31305d2b005e5d
5d1b400d0847010a46010b005a010f0345bb0156003b0009015eb6113b11
3b111636b8ffe8b30b014d36b8ffe8b40b0f014c36b80155b249532cb801
044011202005495316180b014d16180b0f014c16b80156b240055600183f
1a4ded2b2b3f12392fed3910ed2b2b1139392f2f10ed10ed3130015f5e5d
005e5d5d5901140e0223222e0635343633321e0233323e0235342e022323
222e0235343e023333323e0235342e0223220e0223222e0235343e063332
1e0215140e0207151e0303b64a84b86d4274593a1209070310100a314c66
4137543b1d23456947700d120c05050b110c713a5a3d20162b442e345c49
330c080c0804020609143e5e7b485e9163331e3a5739446c4b28017b6196
6635131c1e10141b291d30251b1f1b1a2f43292d48331c0716271f1d2514
081b32472b213b2b191f25200714261e19211610132624192c53794c3b66
50380e0308355065>PBGSHX+Calibri,Bold AddT42Char 
PBGSHX+Calibri,Bold /CharStrings get begin
/three 1007 def
end
PBGSHX+Calibri,Bold /Encoding get
dup 51 /three put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/PBGSHX+Calibri,Bold*1 
[32{/.notdef}rp /space 16{/.notdef}rp /one /two /three 204{/.notdef}rp]
PBGSHX+Calibri,Bold nf
PBGSHX+Calibri,Bold*1 [18 0 0 -18 0 0 ]msf
219.41 134.28 mo
(3)sh
1 /0 /CSD get_res sepcs
1 sep
PBGSHX+Calibri,Bold*1 [18 0 0 -18 0 0 ]msf
228.53 134.28 mo
( )sh
269.28 128.25 mo
291.96 105.57 li
314.64 128.25 li
291.96 150.93 li
cp
.0725109 0 .935027 0 cmyk
ef
269.28 128.25 mo
291.96 105.57 li
314.64 128.25 li
291.96 150.93 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
%ADOBeginSubsetFont: PBAAAA+Calibri,Bold AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBGSHX+Calibri,Bold gcheck setglobal} if
1 3810 1008 <00020024fffa03e40514002a002e00f3b101024355584014072e01072b01
061c01071001070e01060d010b30b8ffc0400b0f024d0030010f032e2110
b80267b4270404002dba02090016fff2400d0f024d161b2e27180b0f014c
27b80156b40410100a2bb80165b44021520a5500183f3f1a4ded12392f33
fd2bc432012f2bedcd392f33ed323231305f5e5d2b5e5d5d5d5d5d5d1b40
36270f01272e01272b01261c01271001270e01260d01072e01072b01061c
01071001070e01060d010b0030010f031b2e27180b0f014c27b80156b404
10100a2bb80165b44021520a5500183f3f1a4ded12392f33fd2bc4323130
015f5e5d5e5d5d5d5d5d5d5d5d5d5d5d5d5d59011406232315140e022322
2e02353521222e0235343e0237013e0333321e0215113332160123012103
e41512730c1e302624311d0bfe110e160f0703070d0a019205182b422f33
482b14731017fe6902feab015701743335ea0a0f0a05050a0f0aea07192f
27202f26221302c5090d0904050b100bfcf5310284fdad00>PBGSHX+Calibri,Bold AddT42Char 
PBGSHX+Calibri,Bold /CharStrings get begin
/four 1008 def
end
PBGSHX+Calibri,Bold /Encoding get
dup 52 /four put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/PBGSHX+Calibri,Bold*1 
[32{/.notdef}rp /space 16{/.notdef}rp /one /two /three /four 203{/.notdef}rp]
PBGSHX+Calibri,Bold nf
PBGSHX+Calibri,Bold*1 [18 0 0 -18 0 0 ]msf
287.45 134.28 mo
(4)sh
1 /0 /CSD get_res sepcs
1 sep
PBGSHX+Calibri,Bold*1 [18 0 0 -18 0 0 ]msf
296.57 134.28 mo
( )sh
337.32 128.25 mo
360 105.57 li
382.68 128.25 li
360 150.93 li
cp
.0725109 0 .935027 0 cmyk
ef
337.32 128.25 mo
360 105.57 li
382.68 128.25 li
360 150.93 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
%ADOBeginSubsetFont: PBAAAA+Calibri,Bold AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBGSHX+Calibri,Bold gcheck setglobal} if
1 4194 1009 <00010060ffe903b0050e003e00e8b10102435558b70536010535010b40b8
ffc0b60f024d00400137b8020cb5283228320e1dba02c40000ffe0400b0f
024d00000e010f030e3ab80125b322220536b8ffe8b40b0f014c36b80164
b22c5109b80162b71318180b0f014c18b80156b240055600183f1a4dfd2b
d4ed3fed2b12392fed012f5f5e5dd42bed1239392f2fed31305d2b005e5d
5d1b40132a36012a37010536010535010b0040010f033ab80125b3222205
36b8ffe8b40b0f014c36b80164b22c5109b80162b71318180b0f014c18b8
0156b240055600183f1a4dfd2bd4ed3fed2b12392fed3130015f5e5d005e
5d5d015d5d5901140e0223222e0635343e0233321e0233323e0235342e02
232206232226351134363321321e02151406232111363633321e0203b049
85bb723c6c56371108050204090c080a294360433a5f42241e4066493a5f
2a1d191f22026509100b051514fe3423452669a36f3a01a469a5713c0f17
170f1219261a1c27180a171c1718355038304b341a0c1d27023228230c1a
2b1e3c36feeb0402315f8d00>PBGSHX+Calibri,Bold AddT42Char 
PBGSHX+Calibri,Bold /CharStrings get begin
/five 1009 def
end
PBGSHX+Calibri,Bold /Encoding get
dup 53 /five put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/PBGSHX+Calibri,Bold*1 
[32{/.notdef}rp /space 16{/.notdef}rp /one /two /three /four /five 
202{/.notdef}rp]
PBGSHX+Calibri,Bold nf
PBGSHX+Calibri,Bold*1 [18 0 0 -18 0 0 ]msf
355.49 134.28 mo
(5)sh
1 /0 /CSD get_res sepcs
1 sep
PBGSHX+Calibri,Bold*1 [18 0 0 -18 0 0 ]msf
364.63 134.28 mo
( )sh
405.36 128.25 mo
428.04 105.57 li
450.72 128.25 li
428.04 150.93 li
cp
.0725109 0 .935027 0 cmyk
ef
405.36 128.25 mo
428.04 105.57 li
450.72 128.25 li
428.04 150.93 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
%ADOBeginSubsetFont: PBAAAA+Calibri,Bold AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBGSHX+Calibri,Bold gcheck setglobal} if
1 1588 970 <00020054ffe903d005240034004800e4b10102435558b9004affc0b70f02
4d004a012b3fb802abb40c1c1c0c35ba02810000ffe0400e0f024d000001
00000c010f030c3ab8ffe8b40b0f014c3ab8013eb330300526b8fff0b30b
014d26b8ffe8b40b0f014c26b8013f4009135944180b0f014c44b80140b2
40055f00183f1a4ded2b3fed2b2b12392fed2b012f5f5e5dd45d2bed1239
2f10ed3231305d2b1bb5004a010f033ab8ffe8b40b0f014c3ab8013eb330
300526b8fff0b30b014d26b8ffe8b40b0f014c26b8013f4009135944180b
0f014c44b80140b240055f00183f1a4ded2b3fed2b2b12392fed2b313001
5f5e5d5901140e0223222e0435343e0433321e0615140e0223222e022322
0e02073e0333321e0205342e0223220e0207141e0233323e0203d03c74aa
6f5a86623e250e0f2b4e7baf78264d422e0f08050203080e0a0c26364930
51704620011639434e2c628c592afefe1228422f1c36343015182f472f2e
452e1801b062a77945294d6e8aa25b4ca6a0916d40090e120d10131c141f
29170a0d100c3c67884c0e1c140d36648e70334d351b0a12190e6b8f5423
223e5300>PBGSHX+Calibri,Bold AddT42Char 
1 4596 1010 <ffff0054ffe903d00524020603ca0000>PBGSHX+Calibri,Bold AddT42Char 
PBGSHX+Calibri,Bold /CharStrings get begin
/six 1010 def
end
PBGSHX+Calibri,Bold /Encoding get
dup 54 /six put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/PBGSHX+Calibri,Bold*1 
[32{/.notdef}rp /space 16{/.notdef}rp /one /two /three /four /five 
/six 201{/.notdef}rp]
PBGSHX+Calibri,Bold nf
PBGSHX+Calibri,Bold*1 [18 0 0 -18 0 0 ]msf
423.55 134.28 mo
(6)sh
1 /0 /CSD get_res sepcs
1 sep
PBGSHX+Calibri,Bold*1 [18 0 0 -18 0 0 ]msf
432.67 134.28 mo
( )sh
473.4 128.25 mo
496.08 105.57 li
518.76 128.25 li
496.08 150.93 li
cp
.0725109 0 .935027 0 cmyk
ef
473.4 128.25 mo
496.08 105.57 li
518.76 128.25 li
496.08 150.93 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
%ADOBeginSubsetFont: PBAAAA+Calibri,Bold AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBGSHX+Calibri,Bold gcheck setglobal} if
1 4612 1011 <00010051fffa03bb050e001f009eb10102435558b70512010511010b21b8
ffc0b60f024d00210110b802cbb306061511bb02ca00000015ffe0400b0f
024d0015010f03150511b8ffe8b40b0f014c11b80165b4401a510b550018
3f3f1a4ded2b32012f5f5e5d2bdded12392fed31305d2b005e5d5d1b400e
0512010511010b0021010f030511b8ffe8b40b0f014c11b80165b4401a51
0b5500183f3f1a4ded2b323130015f5e5d005e5d5d5901140e0207010e03
23222e02370121222635343e023321321e0203bb04070c08fe5606132235
27353e1d020801cafde01515060b0f0a030112180e07049f1d2b252113fc
250d100903070f171103f2373c1e2b1c0c07182c>PBGSHX+Calibri,Bold AddT42Char 
PBGSHX+Calibri,Bold /CharStrings get begin
/seven 1011 def
end
PBGSHX+Calibri,Bold /Encoding get
dup 55 /seven put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/PBGSHX+Calibri,Bold*1 
[32{/.notdef}rp /space 16{/.notdef}rp /one /two /three /four /five 
/six /seven 200{/.notdef}rp]
PBGSHX+Calibri,Bold nf
PBGSHX+Calibri,Bold*1 [18 0 0 -18 0 0 ]msf
491.59 134.28 mo
(7)sh
1 /0 /CSD get_res sepcs
1 sep
PBGSHX+Calibri,Bold*1 [18 0 0 -18 0 0 ]msf
500.71 134.28 mo
( )sh
541.44 128.25 mo
564.12 105.57 li
586.8 128.25 li
564.12 150.93 li
cp
.0725109 0 .935027 0 cmyk
ef
541.44 128.25 mo
564.12 105.57 li
586.8 128.25 li
564.12 150.93 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
%ADOBeginSubsetFont: PBAAAA+Calibri,Bold AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBGSHX+Calibri,Bold gcheck setglobal} if
1 2012 972 <0003003dffe903d00525002700370047011eb10102435558b90049ffc0b6
0f024d00490130bb026f00140028026f400a1e0f231e141e141e0a38ba02
ab0000ffe0400a0f024d0000010f030042b80282b40a353d052db8ffe8b4
0b0f014c2db801134009195945180b0f014c45b80115b240055f00183f1a
4ded2b3fed2b123939012fedd45f5e5d2bed1239392f2f12393910ed10ed
31305d2b1b40490943010942010941010840010a04010647010646010645
01064401063701063601063501063401063301092e01092d01092c01092b
01092a010621010320010b0049010f03353d052db8ffe8b40b0f014c2db8
01134009195945180b0f014c45b80115b240055f00183f1a4ded2b3fed2b
1239393130015f5e5d005e5d5d5d5d5d5d5d5d5d5d5d5d5d5d5d5d015d5d
5d5d5d5901140e0223222e0235343e02372e0335343e0233321e0215140e
02071e0301342e0223220615141e0217363613342e02270e031514163332
3603d03d77b0736ea670382141613f33523a1e376da46c6b99622f1f3852
343d604223fede142b3f2b5452152c4630494f1e193550352e462e176564
6261015b588a5f312c557d5137615349211c414d5c364e7f5d322e547547
2f5950471d2048535e023d233827144d442036302e1a2b62fdb6253d3632
1a1932373d234e525400>PBGSHX+Calibri,Bold AddT42Char 
1 4872 1012 <ffff003dffe903d00525020603cc0000>PBGSHX+Calibri,Bold AddT42Char 
PBGSHX+Calibri,Bold /CharStrings get begin
/eight 1012 def
end
PBGSHX+Calibri,Bold /Encoding get
dup 56 /eight put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/PBGSHX+Calibri,Bold*1 
[32{/.notdef}rp /space 16{/.notdef}rp /one /two /three /four /five 
/six /seven /eight 199{/.notdef}rp]
PBGSHX+Calibri,Bold nf
PBGSHX+Calibri,Bold*1 [18 0 0 -18 0 0 ]msf
559.66 134.28 mo
(8)sh
1 /0 /CSD get_res sepcs
1 sep
PBGSHX+Calibri,Bold*1 [18 0 0 -18 0 0 ]msf
568.78 134.28 mo
( )sh
293.34 106.03 mo
293.31 105.53 li
293.23 104.94 li
293.1 104.36 li
292.9 103.78 li
292.66 103.21 li
292.37 102.65 li
292.03 102.1 li
291.65 101.56 li
290.77 100.51 li
289.7 99.47 li
288.49 98.46 li
287.12 97.47 li
285.61 96.51 li
283.96 95.57 li
282.18 94.65 li
280.27 93.76 li
278.24 92.9 li
276.09 92.06 li
273.84 91.25 li
271.47 90.47 li
269.01 89.73 li
266.45 89.01 li
263.82 88.34 li
261.09 87.7 li
258.3 87.1 li
255.44 86.55 li
252.51 86.03 li
249.53 85.57 li
246.5 85.14 li
243.43 84.77 li
240.31 84.46 li
237.17 84.19 li
234.01 83.98 li
230.82 83.82 li
227.62 83.73 li
224.41 83.7 li
221.22 83.75 li
218.03 83.84 li
214.84 83.98 li
211.68 84.18 li
208.53 84.43 li
205.42 84.73 li
202.35 85.09 li
199.33 85.49 li
196.35 85.93 li
193.43 86.41 li
190.56 86.95 li
187.78 87.51 li
185.05 88.13 li
182.42 88.77 li
179.86 89.45 li
177.4 90.16 li
175.04 90.9 li
172.79 91.66 li
170.64 92.46 li
168.61 93.28 li
166.71 94.13 li
164.93 95.01 li
163.29 95.89 li
161.78 96.8 li
160.42 97.74 li
159.21 98.7 li
159.04 98.87 li
158.09 100.18 li
159.51 101.21 li
160.46 99.9 li
160.29 100.07 li
161.42 99.18 li
162.69 98.3 li
164.12 97.43 li
165.7 96.57 li
167.42 95.73 li
169.28 94.91 li
171.25 94.1 li
173.35 93.32 li
175.57 92.57 li
177.89 91.84 li
180.32 91.14 li
182.83 90.47 li
185.43 89.83 li
188.12 89.23 li
190.89 88.67 li
193.71 88.14 li
196.61 87.66 li
199.55 87.22 li
202.56 86.83 li
205.59 86.48 li
208.68 86.18 li
211.79 85.92 li
214.92 85.73 li
218.08 85.59 li
221.25 85.5 li
224.39 85.44 li
227.57 85.48 li
230.73 85.57 li
233.89 85.73 li
237.02 85.94 li
240.14 86.2 li
243.22 86.51 li
246.26 86.88 li
249.26 87.29 li
252.21 87.76 li
255.1 88.26 li
257.94 88.82 li
260.7 89.4 li
263.38 90.03 li
265.99 90.7 li
268.5 91.4 li
270.93 92.14 li
273.24 92.89 li
275.46 93.69 li
277.56 94.51 li
279.53 95.35 li
281.38 96.21 li
283.1 97.09 li
284.67 97.99 li
286.1 98.89 li
287.37 99.81 li
288.49 100.73 li
289.43 101.64 li
290.22 102.58 li
290.54 103.02 li
290.82 103.46 li
291.05 103.91 li
291.24 104.35 li
291.39 104.77 li
291.5 105.2 li
291.57 105.61 li
291.59 106.11 li
cp
156.65 98.37 mo
156.39 105.08 li
161.91 101.26 li
cp
.754208 .453712 .0344244 0 cmyk
f
157.26 150.49 mo
157.21 151.33 li
157.06 152.27 li
156.8 153.2 li
156.44 154.12 li
156 155.01 li
155.46 155.9 li
154.83 156.76 li
154.14 157.6 li
153.37 158.43 li
152.53 159.23 li
151.62 160.01 li
150.65 160.78 li
149.61 161.51 li
148.53 162.23 li
147.38 162.92 li
146.18 163.58 li
144.94 164.21 li
143.64 164.81 li
140.94 165.92 li
138.08 166.9 li
135.1 167.73 li
132.01 168.4 li
130.42 168.67 li
128.84 168.9 li
127.24 169.07 li
125.63 169.2 li
124.01 169.29 li
122.38 169.31 li
120.76 169.29 li
119.14 169.21 li
117.53 169.09 li
115.93 168.92 li
112.79 168.46 li
109.7 167.83 li
106.72 167.05 li
103.86 166.13 li
101.15 165.08 li
99.849 164.51 li
98.605 163.91 li
97.402 163.29 li
96.26 162.64 li
95.173 161.97 li
94.14 161.28 li
93.168 160.56 li
92.261 159.82 li
91.422 159.06 li
90.656 158.3 li
90.529 158.14 li
89.527 156.51 li
91.018 155.59 li
92.021 157.22 li
91.894 157.06 li
92.598 157.77 li
93.364 158.46 li
94.212 159.15 li
95.115 159.83 li
96.092 160.48 li
97.12 161.12 li
98.213 161.73 li
99.365 162.34 li
100.55 162.91 li
101.78 163.45 li
104.4 164.47 li
107.16 165.36 li
110.05 166.12 li
113.04 166.73 li
116.12 167.18 li
117.67 167.34 li
119.22 167.46 li
120.78 167.54 li
122.36 167.56 li
123.92 167.54 li
125.49 167.46 li
127.04 167.33 li
128.59 167.16 li
130.13 166.95 li
131.64 166.69 li
134.63 166.05 li
137.51 165.24 li
140.28 164.3 li
142.91 163.22 li
144.14 162.65 li
145.34 162.04 li
146.48 161.41 li
147.57 160.77 li
148.6 160.09 li
149.57 159.4 li
150.48 158.69 li
151.32 157.96 li
152.09 157.23 li
152.79 156.48 li
153.42 155.74 li
153.96 154.98 li
154.43 154.23 li
154.81 153.47 li
155.11 152.72 li
155.33 151.98 li
155.46 151.22 li
155.52 150.38 li
cp
87.888 158.12 mo
88.35 151.43 li
93.427 155.82 li
cp
f
223.55 150.54 mo
223.75 152.15 li
223.8 152.34 li
224.38 153.94 li
224.45 154.1 li
225.41 155.69 li
225.49 155.79 li
226.81 157.38 li
228.55 159.04 li
230.61 160.65 li
232.99 162.23 li
235.68 163.77 li
238.66 165.29 li
241.92 166.77 li
245.44 168.22 li
249.24 169.62 li
253.26 170.99 li
257.54 172.32 li
262.03 173.6 li
266.73 174.84 li
271.62 176.02 li
276.71 177.15 li
281.97 178.22 li
287.38 179.23 li
292.95 180.18 li
298.66 181.07 li
304.48 181.88 li
310.43 182.62 li
322.59 183.87 li
335.06 184.8 li
347.72 185.37 li
360.49 185.57 li
373.26 185.38 li
385.92 184.82 li
398.39 183.93 li
410.55 182.71 li
416.51 181.99 li
422.33 181.2 li
428.03 180.34 li
433.6 179.42 li
439.02 178.44 li
444.27 177.4 li
449.36 176.3 li
454.26 175.15 li
458.95 173.96 li
463.44 172.71 li
467.71 171.43 li
471.74 170.1 li
475.53 168.73 li
479.05 167.33 li
482.3 165.9 li
485.28 164.43 li
487.96 162.94 li
490.33 161.42 li
492.39 159.86 li
494.11 158.28 li
494.26 158.1 li
495.29 156.47 li
493.81 155.53 li
492.78 157.17 li
492.93 156.99 li
491.33 158.47 li
489.38 159.94 li
487.1 161.41 li
484.5 162.86 li
481.6 164.3 li
478.4 165.7 li
474.93 167.09 li
471.19 168.44 li
467.21 169.75 li
462.97 171.03 li
458.52 172.26 li
453.86 173.45 li
448.99 174.59 li
443.94 175.68 li
438.71 176.72 li
433.32 177.7 li
427.77 178.61 li
422.09 179.46 li
416.29 180.25 li
410.38 180.97 li
398.26 182.18 li
385.84 183.07 li
373.23 183.63 li
360.52 183.82 li
347.8 183.63 li
335.19 183.05 li
322.77 182.13 li
310.64 180.88 li
304.73 180.15 li
298.93 179.34 li
293.25 178.45 li
287.7 177.51 li
282.32 176.5 li
277.09 175.44 li
272.04 174.32 li
267.17 173.15 li
262.51 171.92 li
258.06 170.64 li
253.83 169.33 li
249.84 167.98 li
246.11 166.6 li
242.64 165.18 li
239.45 163.72 li
236.55 162.25 li
233.96 160.77 li
231.69 159.27 li
229.75 157.76 li
228.16 156.27 li
226.84 154.68 li
226.91 154.78 li
225.95 153.19 li
226.02 153.35 li
225.44 151.74 li
225.49 151.93 li
225.29 150.33 li
cp
496.88 158.13 mo
496.58 151.43 li
491.4 155.69 li
cp
f
428.91 150.91 mo
428.94 151.75 li
429.03 152.53 li
429.17 153.32 li
429.35 154.1 li
429.58 154.87 li
429.87 155.64 li
430.19 156.41 li
430.57 157.15 li
431.46 158.65 li
432.5 160.07 li
433.69 161.42 li
435 162.68 li
436.44 163.84 li
437.97 164.89 li
439.59 165.82 li
441.28 166.6 li
443.02 167.22 li
443.9 167.47 li
444.78 167.68 li
445.69 167.84 li
446.59 167.97 li
447.5 168.04 li
448.4 168.06 li
449.3 168.03 li
450.2 167.95 li
451.1 167.81 li
452 167.62 li
452.88 167.39 li
453.77 167.1 li
454.64 166.77 li
455.5 166.39 li
457.2 165.49 li
458.81 164.45 li
460.34 163.26 li
461.78 161.93 li
463.09 160.5 li
464.27 158.97 li
465.32 157.35 li
466.2 155.66 li
466.57 154.81 li
466.9 153.94 li
467.18 153.05 li
467.42 152.17 li
467.6 151.27 li
467.73 150.37 li
467.82 149.47 li
467.85 148.57 li
467.82 147.67 li
467.74 146.77 li
467.62 145.86 li
467.45 144.96 li
467.25 144.07 li
466.99 143.19 li
466.35 141.42 li
465.56 139.74 li
464.64 138.13 li
463.58 136.6 li
462.41 135.16 li
461.15 133.85 li
459.8 132.67 li
458.36 131.63 li
456.88 130.76 li
457.04 130.83 li
455.3 130.22 li
455.88 128.57 li
457.62 129.18 li
457.77 129.25 li
459.4 130.22 li
460.95 131.36 li
462.41 132.64 li
463.78 134.06 li
465.02 135.61 li
466.16 137.26 li
467.15 139 li
468 140.83 li
468.67 142.7 li
468.95 143.67 li
469.18 144.65 li
469.35 145.63 li
469.49 146.62 li
469.57 147.62 li
469.59 148.63 li
469.56 149.63 li
469.47 150.63 li
469.31 151.62 li
469.11 152.62 li
468.85 153.59 li
468.53 154.56 li
468.17 155.52 li
467.75 156.47 li
466.78 158.3 li
465.65 160.04 li
464.38 161.68 li
462.96 163.22 li
461.41 164.64 li
459.76 165.91 li
458.01 167.04 li
456.2 167.99 li
455.26 168.41 li
454.3 168.77 li
453.33 169.08 li
452.35 169.34 li
451.36 169.54 li
450.37 169.69 li
449.36 169.78 li
448.36 169.81 li
447.35 169.79 li
446.36 169.7 li
445.37 169.57 li
444.39 169.38 li
443.41 169.16 li
442.43 168.87 li
440.54 168.19 li
438.72 167.33 li
436.98 166.34 li
435.33 165.2 li
433.8 163.94 li
432.37 162.58 li
431.09 161.11 li
429.96 159.54 li
429 157.94 li
428.58 157.09 li
428.22 156.24 li
427.91 155.37 li
427.65 154.5 li
427.44 153.61 li
427.29 152.72 li
427.2 151.81 li
427.17 150.97 li
cp
455.88 132.54 mo
450.72 128.26 li
457.25 126.7 li
cp
f
88.722 105.6 mo
88.752 104.43 li
88.847 103.31 li
89.006 102.2 li
89.217 101.08 li
89.485 99.98 li
89.805 98.88 li
90.182 97.8 li
90.61 96.73 li
91.083 95.68 li
91.605 94.65 li
92.168 93.63 li
92.777 92.65 li
94.121 90.73 li
95.599 88.97 li
97.208 87.34 li
98.044 86.6 li
98.916 85.89 li
99.809 85.23 li
100.72 84.61 li
101.66 84.04 li
102.61 83.52 li
103.57 83.05 li
104.55 82.65 li
105.53 82.3 li
106.52 82.01 li
107.53 81.78 li
108.53 81.62 li
109.53 81.52 li
110.54 81.48 li
111.55 81.52 li
112.55 81.62 li
113.54 81.78 li
114.55 82 li
115.54 82.28 li
116.53 82.62 li
117.5 83 li
118.46 83.45 li
119.41 83.95 li
120.35 84.49 li
121.26 85.08 li
122.15 85.72 li
123.88 87.13 li
125.48 88.68 li
126.95 90.37 li
128.28 92.18 li
128.88 93.11 li
129.44 94.07 li
129.96 95.05 li
130.43 96.06 li
130.86 97.07 li
131.23 98.11 li
131.55 99.15 li
131.81 100.2 li
132.02 101.26 li
132.18 102.33 li
132.27 103.39 li
132.3 104.45 li
132.27 105.52 li
132.17 106.58 li
132.01 107.64 li
131.8 108.7 li
131.53 109.75 li
131.22 110.8 li
130.84 111.83 li
130.42 112.84 li
129.94 113.84 li
129.42 114.83 li
128.86 115.78 li
128.25 116.73 li
126.91 118.55 li
125.44 120.23 li
123.83 121.79 li
122.12 123.18 li
121.24 123.8 li
120.32 124.39 li
119.39 124.94 li
118.44 125.44 li
117.47 125.88 li
116.5 126.27 li
116.63 126.23 li
115.26 126.53 li
115.64 128.24 li
117.01 127.93 li
117.14 127.89 li
118.21 127.47 li
119.25 126.98 li
120.27 126.45 li
121.27 125.87 li
122.26 125.23 li
123.22 124.53 li
125.05 123.04 li
126.76 121.39 li
128.33 119.59 li
129.73 117.67 li
130.37 116.67 li
130.98 115.64 li
131.52 114.59 li
132.04 113.51 li
132.48 112.42 li
132.89 111.31 li
133.23 110.18 li
133.52 109.04 li
133.74 107.9 li
133.91 106.73 li
134.01 105.57 li
134.04 104.41 li
134.01 103.24 li
133.91 102.07 li
133.74 100.92 li
133.51 99.78 li
133.22 98.64 li
132.87 97.51 li
132.47 96.4 li
132.01 95.31 li
131.5 94.23 li
130.95 93.19 li
130.35 92.16 li
129.69 91.14 li
128.27 89.22 li
126.7 87.42 li
124.98 85.77 li
123.16 84.29 li
122.21 83.61 li
121.23 82.98 li
120.23 82.4 li
119.2 81.86 li
118.15 81.38 li
117.09 80.96 li
116.01 80.59 li
114.92 80.29 li
113.83 80.05 li
112.72 79.87 li
111.61 79.77 li
110.48 79.74 li
109.36 79.78 li
108.25 79.89 li
107.13 80.07 li
106.04 80.33 li
104.95 80.65 li
103.87 81.03 li
102.81 81.48 li
101.77 81.99 li
100.75 82.55 li
99.741 83.16 li
98.761 83.82 li
97.809 84.54 li
96.881 85.3 li
95.962 86.12 li
94.256 87.85 li
92.689 89.73 li
91.288 91.73 li
90.637 92.79 li
90.045 93.86 li
89.487 94.96 li
88.985 96.08 li
88.528 97.23 li
88.125 98.4 li
87.785 99.57 li
87.498 100.76 li
87.274 101.95 li
87.103 103.16 li
87.003 104.39 li
86.973 105.56 li
cp
115.91 124.26 mo
110.53 128.26 li
116.96 130.17 li
cp
f
497.46 106.02 mo
497.4 105.18 li
497.25 104.24 li
496.99 103.3 li
496.63 102.39 li
496.19 101.5 li
495.65 100.61 li
495.03 99.75 li
494.33 98.91 li
493.56 98.08 li
492.72 97.28 li
491.81 96.49 li
490.84 95.73 li
489.81 94.99 li
488.72 94.28 li
487.57 93.59 li
486.38 92.93 li
485.13 92.3 li
483.83 91.7 li
481.14 90.59 li
478.27 89.61 li
475.29 88.77 li
472.2 88.11 li
470.62 87.83 li
469.03 87.61 li
467.43 87.44 li
465.82 87.31 li
464.21 87.22 li
462.57 87.2 li
460.95 87.22 li
459.33 87.3 li
457.73 87.42 li
456.13 87.58 li
452.98 88.05 li
449.89 88.68 li
446.91 89.46 li
444.05 90.38 li
441.34 91.43 li
440.04 92.01 li
438.8 92.6 li
437.6 93.22 li
436.45 93.87 li
435.36 94.55 li
434.33 95.24 li
433.36 95.95 li
432.45 96.69 li
431.61 97.44 li
430.85 98.22 li
430.72 98.38 li
429.72 100 li
431.21 100.92 li
432.21 99.29 li
432.09 99.45 li
432.79 98.74 li
433.56 98.04 li
434.4 97.36 li
435.31 96.69 li
436.29 96.03 li
437.31 95.39 li
438.4 94.78 li
439.56 94.18 li
440.75 93.6 li
441.98 93.06 li
444.59 92.05 li
447.36 91.15 li
450.24 90.39 li
453.23 89.78 li
456.31 89.33 li
457.86 89.16 li
459.42 89.04 li
460.98 88.97 li
462.55 88.95 li
464.11 88.97 li
465.68 89.05 li
467.24 89.17 li
468.79 89.34 li
470.32 89.56 li
471.84 89.82 li
474.82 90.46 li
477.71 91.26 li
480.47 92.2 li
483.1 93.28 li
484.34 93.85 li
485.53 94.46 li
486.68 95.09 li
487.76 95.74 li
488.79 96.42 li
489.77 97.11 li
490.67 97.82 li
491.52 98.55 li
492.28 99.27 li
492.98 100.02 li
493.61 100.77 li
494.16 101.53 li
494.62 102.28 li
495 103.03 li
495.31 103.79 li
495.52 104.53 li
495.66 105.29 li
495.71 106.13 li
cp
428.08 98.38 mo
428.54 105.08 li
433.62 100.69 li
cp
f
564.99 149.49 mo
564.96 150.11 li
564.83 150.82 li
564.63 151.52 li
564.34 152.22 li
563.99 152.9 li
563.55 153.58 li
563.06 154.23 li
562.48 154.89 li
561.86 155.53 li
561.17 156.16 li
560.42 156.78 li
559.6 157.4 li
558.74 158 li
557.8 158.61 li
556.82 159.2 li
555.79 159.79 li
554.68 160.37 li
553.54 160.95 li
552.34 161.52 li
551.08 162.09 li
549.79 162.64 li
548.43 163.19 li
547.03 163.73 li
545.58 164.27 li
544.09 164.79 li
542.55 165.31 li
539.35 166.32 li
535.98 167.3 li
532.45 168.25 li
528.77 169.15 li
524.95 170.01 li
521 170.83 li
516.93 171.6 li
512.75 172.33 li
508.47 173 li
504.09 173.62 li
499.63 174.19 li
495.1 174.69 li
490.5 175.14 li
485.84 175.52 li
481.14 175.84 li
476.39 176.1 li
471.63 176.28 li
466.84 176.39 li
462.04 176.43 li
457.27 176.4 li
452.49 176.3 li
447.72 176.12 li
442.98 175.88 li
438.28 175.57 li
433.62 175.19 li
429.02 174.77 li
424.49 174.28 li
420.03 173.74 li
415.66 173.13 li
411.38 172.49 li
407.2 171.79 li
403.13 171.05 li
399.19 170.26 li
395.37 169.43 li
391.7 168.57 li
388.16 167.65 li
384.79 166.72 li
381.59 165.74 li
380.05 165.24 li
378.56 164.73 li
377.11 164.22 li
375.71 163.7 li
374.36 163.18 li
373.06 162.64 li
371.81 162.1 li
370.61 161.55 li
369.46 160.99 li
368.37 160.44 li
367.33 159.87 li
366.36 159.31 li
365.43 158.73 li
364.56 158.14 li
363.75 157.56 li
363 156.96 li
362.31 156.36 li
362.12 156.12 li
361.64 155.24 li
363.17 154.4 li
363.65 155.28 li
363.47 155.04 li
364.08 155.59 li
364.77 156.14 li
365.54 156.69 li
366.35 157.24 li
367.23 157.79 li
368.18 158.34 li
369.16 158.88 li
370.23 159.42 li
371.34 159.96 li
372.5 160.49 li
373.73 161.02 li
374.99 161.54 li
376.33 162.06 li
377.69 162.57 li
379.12 163.08 li
380.59 163.57 li
382.1 164.07 li
385.26 165.03 li
388.6 165.96 li
392.1 166.86 li
395.74 167.72 li
399.53 168.54 li
403.45 169.33 li
407.48 170.06 li
411.64 170.76 li
415.9 171.4 li
420.24 172 li
424.68 172.54 li
429.19 173.02 li
433.77 173.45 li
438.39 173.82 li
443.07 174.13 li
447.78 174.37 li
452.52 174.55 li
457.28 174.65 li
462.02 174.68 li
466.79 174.64 li
471.56 174.53 li
476.3 174.35 li
481.02 174.09 li
485.7 173.78 li
490.32 173.4 li
494.9 172.95 li
499.41 172.45 li
503.85 171.89 li
508.2 171.27 li
512.45 170.6 li
516.61 169.88 li
520.64 169.12 li
524.57 168.3 li
528.35 167.45 li
532 166.55 li
535.49 165.62 li
538.82 164.65 li
541.99 163.65 li
543.51 163.14 li
544.98 162.63 li
546.4 162.1 li
547.77 161.57 li
549.1 161.03 li
550.37 160.49 li
551.59 159.94 li
552.75 159.39 li
553.86 158.83 li
554.92 158.27 li
555.91 157.7 li
556.85 157.14 li
557.73 156.57 li
558.55 156 li
559.3 155.43 li
559.99 154.87 li
560.61 154.3 li
561.17 153.74 li
561.66 153.18 li
562.08 152.62 li
562.44 152.08 li
562.73 151.54 li
562.95 151.03 li
563.11 150.5 li
563.21 150 li
563.25 149.38 li
cp
360.25 157.14 mo
360 150.43 li
365.51 154.25 li
cp
f
337.36 127.38 mo
336.52 127.35 li
335.73 127.27 li
334.95 127.13 li
334.17 126.95 li
333.39 126.71 li
332.63 126.43 li
331.86 126.1 li
331.11 125.73 li
329.61 124.84 li
328.19 123.79 li
326.84 122.61 li
325.58 121.29 li
324.42 119.86 li
323.37 118.33 li
322.45 116.71 li
321.67 115.02 li
321.04 113.28 li
320.79 112.4 li
320.58 111.51 li
320.42 110.61 li
320.3 109.71 li
320.22 108.79 li
320.2 107.9 li
320.23 106.99 li
320.32 106.09 li
320.46 105.2 li
320.64 104.3 li
320.88 103.42 li
321.17 102.53 li
321.5 101.66 li
321.88 100.8 li
322.77 99.1 li
323.81 97.49 li
325.01 95.96 li
326.33 94.52 li
327.76 93.21 li
329.3 92.03 li
330.92 90.98 li
332.6 90.1 li
333.45 89.73 li
334.32 89.4 li
335.2 89.12 li
336.09 88.88 li
336.99 88.7 li
337.89 88.56 li
338.79 88.48 li
339.69 88.45 li
340.59 88.47 li
341.49 88.55 li
342.39 88.68 li
343.3 88.84 li
344.19 89.05 li
345.07 89.31 li
346.83 89.95 li
348.52 90.73 li
350.13 91.66 li
351.66 92.72 li
353.1 93.88 li
354.41 95.15 li
355.58 96.5 li
356.62 97.93 li
357.5 99.42 li
357.43 99.26 li
358.04 101 li
359.69 100.42 li
359.08 98.68 li
359 98.52 li
358.04 96.9 li
356.9 95.35 li
355.62 93.88 li
354.2 92.52 li
352.65 91.27 li
351 90.14 li
349.25 89.15 li
347.43 88.3 li
345.56 87.63 li
344.58 87.35 li
343.61 87.12 li
342.63 86.94 li
341.64 86.81 li
340.63 86.73 li
339.63 86.7 li
338.63 86.74 li
337.62 86.83 li
336.63 86.98 li
335.64 87.19 li
334.67 87.45 li
333.69 87.76 li
332.74 88.13 li
331.79 88.55 li
329.97 89.51 li
328.23 90.64 li
326.58 91.92 li
325.03 93.34 li
323.62 94.89 li
322.34 96.54 li
321.22 98.29 li
320.27 100.09 li
319.86 101.04 li
319.5 101.99 li
319.19 102.97 li
318.93 103.95 li
318.72 104.94 li
318.58 105.93 li
318.48 106.94 li
318.45 107.94 li
318.48 108.95 li
318.57 109.94 li
318.7 110.92 li
318.88 111.91 li
319.11 112.89 li
319.4 113.87 li
320.08 115.76 li
320.93 117.58 li
321.93 119.32 li
323.07 120.96 li
324.32 122.5 li
325.69 123.93 li
327.16 125.21 li
328.72 126.34 li
330.33 127.29 li
331.17 127.71 li
332.02 128.07 li
332.89 128.39 li
333.77 128.65 li
334.65 128.86 li
335.55 129.01 li
336.46 129.1 li
337.3 129.13 li
cp
355.71 100.42 mo
360 105.58 li
361.56 99.05 li
cp
f
118.55 346.71 mo
118.55 331.61 131.05 319.37 146.46 319.37 cv
161.87 319.37 174.36 331.61 174.36 346.71 cv
174.36 361.82 161.87 374.06 146.46 374.06 cv
131.05 374.06 118.55 361.82 118.55 346.71 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
75.011 323.04 mo
97.691 300.36 li
120.37 323.04 li
97.691 345.72 li
cp
.0725109 0 .935027 0 cmyk
ef
75.011 323.04 mo
97.691 300.36 li
120.37 323.04 li
97.691 345.72 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
PBGSHX+Calibri,Bold*1 [18 0 0 -18 0 0 ]msf
93.576 329.11 mo
(1)sh
1 /0 /CSD get_res sepcs
1 sep
PBGSHX+Calibri,Bold*1 [18 0 0 -18 0 0 ]msf
102.7 329.11 mo
( )sh
125.89 279.82 mo
148.57 257.14 li
171.25 279.82 li
148.57 302.5 li
cp
.0725109 0 .935027 0 cmyk
ef
125.89 279.82 mo
148.57 257.14 li
171.25 279.82 li
148.57 302.5 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
PBGSHX+Calibri,Bold*1 [18 0 0 -18 0 0 ]msf
144.46 285.89 mo
(2)sh
1 /0 /CSD get_res sepcs
1 sep
PBGSHX+Calibri,Bold*1 [18 0 0 -18 0 0 ]msf
153.58 285.89 mo
( )sh
178.42 325.18 mo
201.1 302.5 li
223.78 325.18 li
201.1 347.86 li
cp
.0725109 0 .935027 0 cmyk
ef
178.42 325.18 mo
201.1 302.5 li
223.78 325.18 li
201.1 347.86 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
PBGSHX+Calibri,Bold*1 [18.024 0 0 -18.024 0 0 ]msf
196.56 331.27 mo
(4)sh
PBGSHX+Calibri,Bold*1 [18.024 0 0 -18.024 0 0 ]msf
205.7 331.27 mo
( )sh
303.74 347.13 mo
303.74 332.03 316.24 319.78 331.65 319.78 cv
347.06 319.78 359.56 332.03 359.56 347.13 cv
359.56 362.23 347.06 374.47 331.65 374.47 cv
316.24 374.47 303.74 362.23 303.74 347.13 cv
cp
@
260.2 323.45 mo
282.88 300.77 li
305.56 323.45 li
282.88 346.13 li
cp
.0725109 0 .935027 0 cmyk
ef
260.2 323.45 mo
282.88 300.77 li
305.56 323.45 li
282.88 346.13 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
PBGSHX+Calibri,Bold*1 [18.024 0 0 -18.024 0 0 ]msf
278.78 329.54 mo
(3)sh
1 /0 /CSD get_res sepcs
1 sep
PBGSHX+Calibri,Bold*1 [18.024 0 0 -18.024 0 0 ]msf
287.9 329.54 mo
( )sh
311.08 280.23 mo
333.76 257.55 li
356.44 280.23 li
333.76 302.91 li
cp
.0725109 0 .935027 0 cmyk
ef
311.08 280.23 mo
333.76 257.55 li
356.44 280.23 li
333.76 302.91 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
PBGSHX+Calibri,Bold*1 [18 0 0 -18 0 0 ]msf
329.69 286.3 mo
(7)sh
1 /0 /CSD get_res sepcs
1 sep
PBGSHX+Calibri,Bold*1 [18 0 0 -18 0 0 ]msf
338.81 286.3 mo
( )sh
363.61 325.59 mo
386.29 302.91 li
408.97 325.59 li
386.29 348.27 li
cp
.0725109 0 .935027 0 cmyk
ef
363.61 325.59 mo
386.29 302.91 li
408.97 325.59 li
386.29 348.27 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
PBGSHX+Calibri,Bold*1 [18 0 0 -18 0 0 ]msf
381.79 331.68 mo
(6)sh
PBGSHX+Calibri,Bold*1 [18 0 0 -18 0 0 ]msf
390.91 331.68 mo
( )sh
502.64 350.38 mo
502.64 335.28 515.13 323.04 530.54 323.04 cv
545.95 323.04 558.45 335.28 558.45 350.38 cv
558.45 365.49 545.95 377.73 530.54 377.73 cv
515.13 377.73 502.64 365.49 502.64 350.38 cv
cp
@
459.09 326.71 mo
481.77 304.03 li
504.45 326.71 li
481.77 349.39 li
cp
.0725109 0 .935027 0 cmyk
ef
459.09 326.71 mo
481.77 304.03 li
504.45 326.71 li
481.77 349.39 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
PBGSHX+Calibri,Bold*1 [18 0 0 -18 0 0 ]msf
477.72 332.78 mo
(5)sh
1 /0 /CSD get_res sepcs
1 sep
PBGSHX+Calibri,Bold*1 [18 0 0 -18 0 0 ]msf
486.84 332.78 mo
( )sh
509.97 283.49 mo
532.65 260.81 li
555.33 283.49 li
532.65 306.17 li
cp
.0725109 0 .935027 0 cmyk
ef
509.97 283.49 mo
532.65 260.81 li
555.33 283.49 li
532.65 306.17 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
PBGSHX+Calibri,Bold*1 [18 0 0 -18 0 0 ]msf
528.6 289.56 mo
(8)sh
1 /0 /CSD get_res sepcs
1 sep
PBGSHX+Calibri,Bold*1 [18 0 0 -18 0 0 ]msf
537.72 289.56 mo
( )sh
0 lj
8 ml
314.64 235.98 mo
317.48 235.98 li
317.48 201.96 li
323.15 201.96 li
323.15 235.98 li
325.98 235.98 li
320.31 241.65 li
cp
.877104 .675593 .289403 0 cmyk
@
375.6 245.4 mo
339.12 245.4 li
339.12 204.96 li
399.84 204.96 li
375.6 204.96 li
375.6 245.4 li
/1 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 540 ]ct
[61.4386 0 0 41.1621 338.761 294.239 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 171 
/H 114 
/M[171 0 0 -114 0 114 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 171 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 171 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 171 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 171 string /rs cvx /pop cvx] cvx
]
/O 3
>>
%%BeginBinary: 1
img
JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&L&cf*
JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLN*JcLB&
JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&L&cf*JcLB&
JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLN*JcLB&JcLB&
JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&L&cf*K`D/U!sAT*
j8]8`"9S_$!8%8R!<N?(j8]8_!s/MM!3?/&!<N?(j8]8_!s/N$!.k3&!7UuP!t#\W%Ktno"U#;N'++im
!2ol$!XK;K$NoMk"9T#D%gW.:K)kcK"Ter>%giF$!!NH3%h8jHY5j.SU]:W%%37,W*t&/6!!!')$Qh)W
*=W+-!;?Hu!X]\g,o6jgkPthg#o=m5(((,N!6Y?I!X]Ye,SpafkPthg#o=j3'ab$$!.k3&!:p0r!Y$55
:IluJ"6]^j!YHqQ:-0O,"1nQR!!iT4(G.d0+:SD9!!iT7+?)D7(CC6,!1Nro!=BVn4#S2i!q?9c!!iT6
+>l21(CC5.!.k3g!!r]7*^!J.7jSTGkPtnj%4+GJ<BM<1!pouS!!rZ4(+r!H2]N/*p&O[a#ltAQ2G$4f
('t#1!9sOj!=9Mm5XdOM$3B>j#ltAQ1dsV[('t#]!.k36!!ilN3*'Ec1`$Am!:9am"r9!l?roB/$3Hk#
jT#Pk'e;[G5UR-Hjo>\j&LK_974]/Z!RLhS!!ifD.6pEe-4g=B!!rc=,s=db.MN-hquD<KJcOU,#R;2(
<+8ul*!t[+#RMJ3=^tGi)$e[lYlG%5&h$%@7P,>[j8]Gj'eDgM67EQOK`D/X&LR`G8jY$B#NPjj#8AXS
90Xd:"g.iW!3H5-";<Fb@pVGE%0GSj!s/oS5m:S);(iRcL]@b^!tQV?:J*D\$3B2f#ltAM1J1G-,7am`
!7UuT!tHM;91CTQ$3B2f#ltAM0Le\u+q=_5!.k3&!;lg'!Y-MI@q84\&Hh"m#m1_e94VO',n:!f!71]P
!=Kl,:Ja+o%0GMh#m(MV4&A^4*")f0!2KT$!=Bf)92%;d$j,Ynq>^g'$Q_9$9/[as!L!M8!6Y?J#ol-9
C0NS4#2fIe"rB1%CL94E#O;A^!!ifE0M>D:.1l^M!;$6s";*(R=%b1]"df;\!!ifD/k8c,-P-F=!!i]=
-U^j&/JJB,!.k3?!!r`@0NMt#7j/3@nc8+Y#m(JY7qQO:0G4JZ!:Bgn!Y6PE=&Cmo#Q`i`#lt>N2c<^D
,Rsmu!5\^B!Y-G?;GB"d#Q`i`#lt>N2,7%6,7O_J!.k3&!9jIh$6_iLDHSb1"Ps+a";N^rDIl3Y$I]!c
!!iiJ2GmUH-4g:9!"&f>-:_392&HT!!0$sc#T5Hn<'hlA!rr>Z!!iZ;,stX+1DgD!!.k3Y!!iZA1g=m0
6QZWi!!EWN6tU?>=u-foN;s.a&1:"P;)J@j#M]:b#T#?r>"9nM!jVg]!!iW:-:Cj.1)C2N!!iiH1JUq;
,n:"5!.k3(!!*<G#"3'A=tpZmg].T^'/Nm5Aj[RD[fG"[#R(u$;HcR:%g(Md#QbM`8R#(M('W^uWrND/
(,J]c6R3-Ci;icU#QbJ^793/='a9[!JcO7"#QbJe<c;bH+q!$(#RVeOD/WB&%KbkpVZ6u'$R%oA=$%<+
jT+uS#RDA3=B\!4$NZOnq>^d%$6_Z7;E,R#g&MBa)`gnt4s(+4_>o/fU&YH%(cu/I@m(\6l2^>S#R223
A92-<('L*,o`,7"&hQg`:G3@ag&MB]'/<<h9Ig\W`rO3]#QkYh8Q\V;&d6ng#Qten9NXh7%g2D'JcLB&
n,N_$+\HNj=tgNjmK!7gmf3Uq&i!X3Bh'6MbQ,Q]#RD;.='S6@%0GqtrrMQg#QbJ^8R,4R(BsR6QiIBt
))kGp6R*!@oDnagrrMQg#QbG\79<;C(BpW8L&fs.!WiK0oEbR("p4Gt#QbPi=)r.Q,7<r@$3C>8$OmRT
$3p\8o)K"'-;\T"<\"X[!jDY+!<WMt#6G&3!VHEu!=U/@>Za*-#lF\r!"&`/"UPMD$4$e;!V69s#ol-3
>=9SA!O)P(!<E9+oEPF$"9J/q#QY;W6!$uG)[Ps6!s&K-$2t86#R(;2o)K%&*'@2$5TgC7gAlg*WrN5'
#o4QR+Tif'%0Q;(#Qto&@!$!I)[>m6%0?bG)'C:X/h87i((19;!!ifM6tpaM2%p)!!<)s#!='2PoGI`I
&de^6!!iZ=.nj8I1_^)a!"Ar4$kjHu+X/$K((giToDf.#(,]&t9.1;PhuM1*!s&W;(%`@G(D-uUp&G@#
%k1%P:,*Fco)K4#"Ubq[*?cUL*#9%k"82^%!!!0;1Jh4E-Op3;!.k4H!!i]D01&<)84Q,J6jQ4O92/&I
1E$Ml!!icI5\5+J3Yhkj!"T/@)Cmp?:fC:i:.-ua&dJ"/#Qu#.A9MKH)$K%$blA"O&L0+o4#f/Wr\Xs>
2`j,`2'rt?p&G@$'/EEl:+QtZoDfC'$54O72a0Jl5<LeP)@coJ!;Z[$!u!=a?ViBh"0hh3!tZY23&ifR
2#]9:1c76Q3&;io"nr!'!!Erg9j1.=%g2G("p,,F+=oB4r]LEG1FF(M"SDa#!tm1Z>"gL\"24be!6>-S
#9ZHEC1U^P;,9ta<*X!OC0j+F#PJ-'#9HBMG$[!<!qcO)!tZV;:gIF4<`E+)?s5uL'*&1/!!iZA2dplD
6Q?<8!#,SR2GR7L8jkm,4[)/';-6gj0bsrj!;ca%"Vs$s?V2[U!VHF)!Xoqu5"\I=6pX449Lgu`%g2M*
#QbPe9j^jW'a2DSmf4%*(c4i^9h%B24$,Pg786]X7P5DZp&G@%(,\rm7OAQFo`,R*$Q1HW7Roj35!VP-
6Sonq"82^#!Y6\N>#6sg"Rc>B!1*["$7AekEa_[*2D[-I5ZVZFEa(F<"SMg$#pE&]G$H[1!qlU-!tHPA
>\7GD5;Y#M7:'_=81"fJpAbI#&i<s=D+YlTa8kK*'F5^F>$Oca0.A4p.5F:m@9c>P&Hh_,#R;50=^O`F
$N]r$'*8O\1J(J>5VXW2-T4Rs:H0=%!VZR"!=gJM?W]<)"nVf/!#,\Z5#kZU3@uU),pt?2;I!9k-P-CR
!!ifI3`K9O+pnAE!!`Q4)_a]U8j*P7-6acn7Suf:*!u`@!!iT7-:_6<2\uXk!.k44!#,kn=`7h@.iT6;
(*,21DK]SZ+U\AF!!`iW;fZt_.h2.O'+,dF?>X7L0c^o=(+`:!F'q*J"SVm%!Y@"jG&L/#$2FS3!#,b`
7TrVI+;>Cu&Jc]Z=^P#`)$p?;!!`cL5[7Vb+:@cA!XKPr&5$&%4XCjS$kXXH=C"TQ'*It/#QY>Y8mbab
)@*MI$47qC<D57m'FtZa#o+aM<*E!P)$p?;!!`cL4]bcQ+:@cA'*o@+7T3#C,S^ds%j=&6=@atU"8;d$
!=L)@>#dX&#M&m,!3lM<!YI.jAl(#l#6Y/;*'@SKCJcVq"8)X!$7AkrFB0asqZ-No'Ef1.=`/(V0c(,u
!t$/@CO'bi+URiB#7W4gG&pS/$F0X5!=^=e7oDMo%g<%;#o,'c>ZX-5%Kc;'#7)><?=$#?$2+?5!tcnM
=]e!:&I/@=#T,L%@TY]0#PJ-&$6_rI>sKA8gAok+'EJUf6V]`e%Kuq:#o"p\=&M1)%0H2&#7)>8=]n!1
$2+?5!tQ_F<)Z",&-i7<#T,Es>uN^##PJ,u$6]R@>$*p-#`&J4!#5J6!u!Lm><Ef/!!!-8/lQV*><!K)
oDf+'-rtG3<@8.J!!r]9,thrn@Qkb<rW!3/*(+CaDbqYbp&G=,.pI1<<@/(2!7Lo]!Y6YI81kPZ!!!*3
,!]7681P>VoDf+%*^j=@66-@+!!rZ5*'7,*:,!CfrW!3-'fAou>!<l1q#LBo#7;SE?X5u<#dOFD!Y-PC
6nAuT!!!*2,!Ak)6n&`OoDet!*^Ej1=[*o4pAbL#$62$%=@t1[#Q=]/"V`^f>ZEm*#PJ-&$6V`?=?dc2
\H%3]c2\L['/)sJ-k6:Y!Y$AEATD9I+:82B!!`iX<-*._-k#bL#m;&'??C0d.hDd]!!i]D2d0g$666C2
!;QU"%4k_,E`47kZ2bO>%jO(n*X_uK!=Bc);-ZmR(^L08!!iQ1*'mk:732d0!!r`>.S=#O5p-R:rW!3+
&Lp:K9JdLgp&G=)+\5sF5TC'D!;-=*!Y-D52'*)*!!*EG2,..F0c1/soDf+%*'RJ-5op@,!!r`=-q7??
4s146rW!3+&1Bn@821k`p&G=)+[fL84WFam!.k3A!"o>B+#,;a"onW0*'@SJC/68j"8Mro!!`fT:iUY^
/.M=R#R;D>C3XJ^*XVcF#QbGX3^c.[&d.k.#QbPk?$:-]+UQ$dn,O(%$5Y!3'*J:8#8Jja>?*g.%0H,$
#6u23>@0lD$MON+"Vs!r@9#3$#Q4W.!=BYp2)$']!qu[#!=U5G?WoQ0#O_Z2!"o;>(F1.:"98E,'J)aT
;*,j.!qQBs#9,d+>!jG?pAbI&(,Sln;)B$nr;Zj!$3h=s1G0^X!qu[#!=L,A>#dU$#FkdG!9sOq":c1\
$3C21'era,Dd#"7#4_a"#9ZZVG$Qd5!r)a$$7/PiH"9#S"T/6(!t?+h)\E;J!!iZ?2.1TC7ihp-!58FE
!t,\O#QXo-&1'_I>"9tQ"S)Nu"W0='?V2RP!VcX$#TQ'6@SeZi!s&9""p,,F().2\p&G@"%k(+Y=#Ulu
YlG::$4dUP!<<34,X>=/6RNEF"S)Nu"W03t>"0_E!VcX##TQ!/>tcd]"8i-'!X]PU'FY-<!!iW9-V.E=
2&6A?!.k3\!"T/7!s/H)%OOe]Eah9T$3Kbu#R;A<Bm*lB'*J"0":ZkaG'O0t2A62i!!E?-#6k;'!!iZB
3b!8G65p-5!!r]/!W`9&$QM0*"^FeX('js3!!i`D2,mpV.1ZLT!!ioS7UKUu.1ZLW!!E<*"U"o"!!iW<
/5BPN1_^)D!8@Ja!WrK)!!3KI2c!LI0,=fonc/q!'f/Zi81+lKp](R,+@97;81+lKqZ$a""9eo0o`,3u
%k:1T:GEO`"G6]+!;um(#ou3;EbS5q&-MG&#R2/2AThQH(^0X7#m(Yl?$LU#0bFKP!!icI5@nqH4;\4U
!7:cQ#8T!e>Z<g+$j,r!#Qteq;.!*P&d.q0#ltG[8mu.#,n0n?!!39:0a1E\:G*7^WrNG2'eW$Y:cTO(
!q?6r";3=]>"^FZ"8Mp'!=L,A>[0`D$j#Vn#Qten9j(+?&HfB?JcO$q#mM2&=)MnW1DU,_!!iZA2ICQ?
732^0!!r]=1L>?O>V?Qgli7@m!!s`<C3*Z;&d,38#m:hf79Nb^-4p@L!!<96.8'eM<&PKqq#C^%%44\V
@7_[O!U9Xj#8]@">tQIS!kA='!!rc>-:(U15p[$Dn,N^q%jskM:c&pkq#C^%$meAK>X]hD!U9Xj#8]9q
=@OVH!p'E6!1a)r!tZkUBl[TF*!uTE!sAi6"8;d%!!3WZ<H2qU-OokO#m(Yl?$LU"0G"<O!!r]9.9(;*
;^VqS^&[X&#m(MV4B,QZ0GOil!!<<,"TnAt#QY;T6<dVY*=DTB#ltG[8mu.#,Ra_>!!rZ5+$j+75TL.3
l2\a&#m(JU3`&mK/eeQi!!<<,"TnAt#QY8S5?:cI*=DTB#ltDY7U01f,7=PG!;6C!!=Bo4<`M:'#m$@m
JcP-;&crC^6"=qK80n`I!!!39*?,Omp&G@)*^sd`>r32sq#C[0.p7%@?o8T"p](C!#mgb0!!iZA2I:H<
6QHF"!5JRI!=0Jt:L$gX*")cI!!EcI'FY*;!!ifF2H3pR-P$:S!!ioS7UKUu-k?CV!<)s#!s]&5p](R$
&1L4W;`,<oXT/q6#T#0f=&1^o$3:,,":Z([$NL;&!!ifF1f.7C-4U+Q!!ioS6<[Yc-Op4Q!!<<.#6X`$
#QbMa7T`GA'a;VXJcNC_&dB44>B+O\0GO]j!!3]Y4?+Dip&G@$'fTK?AO.:?q#C^.,u\i0A3:\3!;Z[!
";)Xo&Hqn0#R;>9Ao_39'a(Q<$j74n86]4`,S1%X!!*63*%i`X#ke6(!tZqT>Z!9l"Si$'#TQ*7@SeZi
"8Mp#!t?"\%0QD+#R(r";HugC&-C&UiW'So&h$.K<'MT<!rr<%$QL]H(C9^7#QkSc7orD='En43#RDD5
='\KN&Hhh/"To/J'FY*>!!i`B0hte>-P$:R!.k3/!!iZ>/5^2'?9B/,$2so0"rTL&9.(/MpAbL$%4>"j
DGV\i!r;m&#9QKPH"obh$2OW+!Y-G:3$/M(!!r]9-W+c!;'ueSeH";'#m(S[5?D)^/eeQi!!`W?/ODN>
$3Bl$#ltAR5?V,Q*=;iD!!i`E3*0Qh2AQPo!!WH3)_EQV#l4N-!=Bi3=]ms0$3@:0#m(PZ4]5?N///?g
!!`W>.mH!6$3Bl$#ltAR4]GBC*=;iH!;um'"W''p>u<Eo#PnE)!=Bbr.2N9d!!rZ5*BdA$4WOk1XoO%R
ec6Bc$R%oLEb.`c%0?M0!Xg5F?V`!Vo`,7&)aIqR?8r`(q>^g)(cu/ME`FY&"8`'&#ou-,73`09!!EE@
3*pS,A3_(=XoK.:#oPTt>Z!F!$3:,,!=9]*90F7$o`,1"'J`Kh8h0oS"8W!(!tm1[?sH#A%0HD,"pYnr
5W0Peq>^d'&M$IX:bi^gZ2jh''EJLX1JLqF2&cl'!!!$+)`L8K*!u9<#R(nq9NFV3&-Mb/#m1bi8R#7\
+UeGL!!WZC/3Pg/#l4N,!tZnN<_P.\"l962!2TZ%#9#X/Ec"`.'*S:7#6ku&>%:/I$2"9!!tbbk<c2VE
,n0qQ!"&c;-r=f)@mM1G"9&9+!XBMt:g$%(#Q"K-!Y$GKBl6s)&HfKBp](U('.ca\=?n)A"9&9*";*(Q
:H96so`,:"%3n8D<')',!W)j(!=Kr4=^Or\(CC6C!!iT/&LK\21):&j!!rZ5*'7,&6mE-BirI:'#mCtl
7TWMO+q=_S!!`W<-UUNc(^K^6#m(MZ5ZCQ>*!u`D!"&`6*^!D*9/%.h!r`0,!<j#\4@1\9"TSQ$!!rZ5
*&pbo5U$U<O8sk4oDfU/'/*=&F'q0Q%L31C$Pk6fAn+.I#4qm$#ou9?DdGIB#5S<7"rTI.EcG;F+;,"f
#n@k-93b:H'*J+3#R2,,?>j:<*=:m/a8cqW%jOAC>tcpf$O$Y:#n\:B;GT+a"S;["#8T'i>"U=Z"Sr*2
";<=Y>['`N(_-fV#7D1j4%VU;,7akQ!!i]?/4s)@1):+t!#5SG,!Jt.81kYb"U"u8%j3o.9/.+`r;cTm
#R;(t8l\>1&d8%2'a,.!7TWVY.i8^$#6tSL,</+S+q=\O!!i]>.RmE10,4`-!.k3h!#>VD,"H6hEEP=I
*#]b:,;`&(EFCpF"S;[#!tZtZBk^?k&-D_/%0?t_6t("L>=1+k+X/?>3_s$_4<+\)!!r]:-r4Pk:b*(Z
Y5f:<#oYa#?s?)O)\j##()nV_:g6XG&HDq*!!r]8+?ib(4WY"4qZ%<2$5tcr>$"6P,odd@+"TQI74o;[
qZ$p'$Q_H1<'DE5!lY0*!#>SA)Dt8o<^J8T'GD/q)^[O<<_4eQ"7uR"!Xg,5:f'4p$N^,)'EJOZ1J(SE
6o$#-)&aSH4%;Le'F4L8#ltAS4&Aa9+:A8@!.k37!"]8J1g+gBDd>t"4Zkkm8607)EcPA=&d%Y)#R2,)
>A@P1*=;QB'*Jmp6<n5=@965s92Jeu=$Rr=!rDs'#ol-:C0NV6#0?l-!#>YJ-Uq<J>"Ue00.nn53(-SJ
>Y$.N!V69s";31T<D5+_#PnE6!t?8-8Q8Y`76NXm5"A461)^K#qZ$m,'ei<]81G5To`2Q'('>'o6<7;j
7Q2qO/1iM55YP6\6mN3Bo)K%!&L^%E81kV^q>^R!$lom678QfP5s%"b4@;S(0,b/uqZ$m,'J;pR6mrWM
U&]oJh#J/m(cGB(AR\kC:esk`;cd76A7.qS$h=9(!Xg,:?t`Or('aU8&Hi[h3)3[c@:3GK?!0o`+qOkR
!!riF0i_mp5p-O:rW'2''a#'t6;LHR83oF&4[),"8kr2V3#i7q!!rZ4(c+ia67*9Iq>_*0%2gZY85)`O
91hfG4=hBZ!rDs(";)qH;bSta#m%1/!Ws#^&jK#`8jkj*4$,Pf5t4I?82_Fonc/ss#oG?e:Hp-9"Sr*1
!t6%r3^cM184Q-=696S7$Ng2*#m:ba5>Og((^U5p!.k3P!!iZ=,r\%S5X%@04:")65<qIr//JN\!!<<7
-V+DL@S8-_"Sr*/!t,qm1d=E$91VB/-lNNsqZ$p*&L^7[@7VaW"0V\3!!!'0*%E[!1,(B[/dO*a0etL:
+V=kI!!r]8*B6bg4!+q7q>_$-#ne4*0fD$R3&E-,'++g<!!r`:*]Zqh3#rD/gAo\&#QbDS-n[2,/hR#Q
#V@Y]0/"k"&-VM'#m(JT2G$M#*t8>K!"T,;&KE,M1cIBP0e".W$3L))!s8rQ2[)cE2B</,L]E#,q#CL$
&JuGc)uCQP)Zprj#m0Sr#m:tq9jq?q,7XhP!"Au6$POF"+X/$L(CgWNqZ$p(%3e,D?V;p`"Q'4(!!<?5
&ek6Yq\/oB!tu.L!Up'q!tZY=9hI8^$Ng/)%06S<%hf]r)Aj5%$NpM-!!rZ5)Dk#Y4!>+:WrN5)$kX0P
'`/RB'E\sW#6FQ!q>^g(%jF#*7PYni!r;m+!<`]=',DH((_mSh"9JB"#ltAO0h"Sl+V"Ua!.k3k!!*0)
o*,3u"76'o"rAsh?WfK2$2=K,!WrW3#mgh@"9SQ&qu@!-)`h#*8h:_^W;lr#"7lWr!s8<!oDf."&L9M4
7P5D\p](U$!X&Z3#6b54!Vl^$"V`LU8i\%,"M=a&!!*-'o)o'r!posn":ue>7m\a@#P\9*!<NB-#6tD8
!s/2t#R(nl5Xm[U%g;(rJcLB&mJmLt(bn`f8gk5PkPtki%OXbI81YM\^];4O#R(he4@V=P$j#Pl#QY;R
2afVK&HqG#Q2h0o&L9A'2]`>-p&O[a#QY8Q2*a&C%g8:#JcNIa#Qb;L/jV`M&-M+r#6GA]4[1G4#4MVT
!!iT1&gB+e*=N#H!:Bgl!=Kl#0d%&2SH.^N#QY/B+ttYj$NfMl#6>/O/M8.V"O-pu!/COW!XBG_,68Vf
jo>Pi(Ejk6#,M=R!!WH-&/Z?!#Nc!i"VDUg%g:8[XoJY,"V2Fh&I7Fu"U,GT(CgTH!.k3&!7LoN":>SC
!p0Ic!XB)?"P!LM!!EB0$3^Im!!E<+#m^Wb!;ZZu!sf5;!Tj@b!<ic8"0MWU!2';l!os=_!!!(S!:p0j
!TF(Z!O2XF!!!&Z!!!&U!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!/:K*!.k3&!.k3&!.k3&!.k3&
!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3*!.k3&!.k3&!.k3&!.k3&!.k3&
!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!/:K*!.k3&!.k3&!.k3&!.k3&!.k3&
!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3*!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&
!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!/:K*!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&
!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3*!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&
!.k3&!.k3&!.k3&!.k3&!.k3&!.k3[!.Y~>

%%EndBinary
grestore
np
408.96 245.4 mo
375.6 245.4 li
399.84 245.4 li
399.84 204.96 li
408.96 204.96 li
408.96 245.4 li
/1 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 540 ]ct
[34.0774 0 0 41.1621 375.241 294.239 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 95 
/H 114 
/M[95 0 0 -114 0 114 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 95 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 95 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 95 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 95 string /rs cvx /pop cvx] cvx
]
/O 3
>>
%%BeginBinary: 1
img
JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&
li;V;JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&
JcP-;JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&
JcLB&li;V;JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&
JcLB&JcP-;JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&
JcLB&JcLB&li;V;JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&
JcLB&JcLB&JcP-;JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&
JcLB&JcLB&JcLB&li;V;JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&
JcLB&JcLB&JcLB&JcP-;JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&
JcLB&JcLB&JcLB&JcLB&li;V;JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&
JcLB&JcLB&JcLB&JcLB&JcP-;JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcNjlJ,~>

%%EndBinary
grestore
np
399.84 245.4 mo
375.6 245.4 li
375.6 204.96 li
399.84 204.96 li
399.84 245.4 li
/1 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 540 ]ct
[24.7817 0 0 40.9214 375.362 294.359 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 104 
/H 170 
/M[104 0 0 -170 0 170 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 104 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 104 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 104 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 104 string /rs cvx /pop cvx] cvx
]
/O 3
>>
%%BeginBinary: 1
img
JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLZ.
JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLZ.
JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLZ.
JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLZ.
JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcOg2"Tef0!s/P$!;Z[!!<WE*!<Jem"T\]-!W`>r!.k3f!!i]1
%Mffn$46mX!8.>X!s8oC&J#-Q!j_mr!!iZ/$4dXW#RCL%!1s5s"9]2M()%#^"76)s!!iZ/$P<s]#RCL_
!6kKL!s8l@%h8jN!l"_e!;lg)!XfAX0ek@&*=W)QV#Ul(#mhCo,pX6A$3C;+!36)-!=9&K,U=TL'ab!D
j8ac3f`2E^&J6N`7nu--*t8Y][fGmt$ipeH+?)5A/M.bG$3I()"T]#?+>l"\3\)]s$46ik!4Dk9!YH"p
7n6<94!+n@"53b"!"8l;%3RSg4=r-$$46jP!9=+g!=TAZ2)REF.i/O"!jhrc!!iW8%4+G3>ZFc-4<>OO
!Wo;#%KQnD*&]]H6:*:?('t!Bn,U!!%KQnD*&KK@5<g\7('t!Bf`6U(jo>kq"r9!N;.*d53]\5f$3I:/
r;[<1";)t-5>4a>/1_MA#Q^k(%KlnF,pb]F83n^T'F4sFr;_EL_Z1/N"r9!N;.*d53]\5f$3JNRg&MTc
";)t-5>4a>/1_MA#Q_F8nGj%%":le)4\/+0.Ol,<#Q^V!ScB0**#q"B=^tH32AmA;nc6&t$jRL^/4N*)
6:*+7'*[+jbQ&%V'GN#`6;'O--P@$q_uPAhq>_!,%1OFG6!e&2;(jR9"9bY'%fm"E(c*s?:JX2",7akY
!3#r.!=B/N0JGsh90FIC%Kcgt!.k4&!"K&>%3Rr&?=RJB0/!tA"M4[%!"K#:$5bQT8l&5I,9m^$"/l2%
!=B/N$8=/'91qDl+q=\WN<$9b%KceE-n%`!A7J/$,n:CdhZ1e!%KZ\?*ZdC>:es&1*"*,Ta8k0!%KZ\>
*Zd:79M79%*"!#RYlKda$O.C`2HsC$?XGr9)up5@!"8uB&Lg7A=%c1>'bpo<!5&:?":u+l6pspC7kGDh
"k3O(!9sOm"rA(6>?blM?TfAK#GqJ0";)4p84ZfT9.q"p"f;8.":u+l6pspC7kGDh"nr"K!65'L!XfA[
7n70,CK3&B&d&6Z!8[\c!=9&N2`FW9=$e/X%KZ^E!:9ar!=9&N2)S-,;ElBN%0?U-!1Nrt"9]Gq1Kn[6
AOJp/$4?J,Z2b=9!tZe+7p/tl2)Q3V#i>X(!"B#4%j`Mh<)cRJ1DgB'a8gelpAbX*";N^K>&J4h6pr.)
$E!k4!s9)]-:_3A;)L3J#QP..!"B#4%j`Mh<)cRJ1DgB'lMuM:dJs[_+!3m_AoCjV1D:E(^&[Bt$j[Xc
2,[=U7n4m:%g&X/%0-YM(Gef]<C9,"%LrQ%!3ZA2!tu>(>[28\Aj[RZ#N5[&!"8o>%jjk>>>e?V()@(r
!8RV`!Y,\d77C6P:,3P!"g\2f!!r`@'/NluEFrfM!Z`9dV>q#+%hC!Y8R#(j2&6r2m/X]t$j$nK,t17'
:/3PZ'a<.gJcOs6%13Fe:/5YEDcA/7%KZ^3!<)s-#RDA34BPcj5p%0V!<K(u%1!4Y3]^2><B_KH$3:2)
!.k3h!"B,:)F$GsF)t_K3#2W"blHJu%0QeI0elL1>tcb!&H`-D!:g+!"9]Aj/kfAL81>tu!s>.qT`>N+
"r]]jA92g"3&hZV"RlE$!"B&6'/;4<?!U,S.hMjcf`9=u%0QeI/hTh"=@aki%g)pN!.k4L!"B#4&hu+G
EcPka7iqs@VZ7/-!Y-M&8R,M"2`DNV"oJA%!"Au2%4!2f='&3U2&?E"jT'l4nc/dt#6Y)0li7G%-72Q,
DK/]X.h3$j^]4K@"Tnc+li7G#*#q.F=^+9^+:APX^]4K@"Tnc+mf<=e$jdmn4B,9\5X6G!$3?:i`rH5I
#6Y)0li7G%-72Q,DK/]X.h3$jirIp9"9er2!<MNe$jdmn5$;#m6pr.*$N\HOo`,*u"Tnc+li7G#*#q(?
<)u7L+:8GV[/d!&"We^#$O[+)!!``L*COUUFC,/X2%pW*^]4NR((giZ"76's"Vqk2<)d0s9.1;]!q--;
!!O,R%g`OEm/ROu'brN$:g$:Y-OpUffDpL'#QR7\2Bj=X"pXMr$j7Fc4_/)HA7Rh@)$I_T#;n@f)B'(g
"S2Wl!"8rC'/*0Y?VjQP',(J`!!b;9-Q3m4"9e/n$j.+T/PJiA9M@#N&d/"2JcOU,#=Ls<+sIX(#4DO#
";r(?A7TjoA3CeJ"O-r=!!bA=.2j*7"9e/n$j..V02PJP:f&eY'*H#M#r=@b)B'%f"98Gl!"8rB&hQdN
>"hUA&eY;=!4i.9?sm/,74T#b"RlC"!u2P0@:==nBgWj[#4MW?!!l7l7lE7J%hAd3!"8o?&1UCK?W9u^
'bpl)!9aCg84Z*)1a!8<"7Q:!!Y5ei8P*)^:bi_!"Mt/*!"*%=C1CaE-703(!qu]m!"8oA&i<s&G&;(g
+!1a'!")=j<DQCM*#o=e!V-4!!=fSe91rVo=?.06"oJA>!")1b;+jP?*#o:d!V-4!!=]Jb7n6`];`>L/
"m#`9!:p0t?=%AV@n7pn%KZ_&!"8oA&i<s&G&;(g+!1a'!!l1h<DQCM*#o@d!V-4!!=fSe91rVo=?.06
"i(*F7Rg6J9/[b0$3:1u!!NB4%44S8#$Or(2]!86M#bm&$;aQ9F)t_O4;e8)nc0("&.gL#?$:.):Egth
g&U:9$9gXU?!U,V/e\<hnc0(!$k+@Q8mbb*4W54D_Z9Z9$9UFL=BJ*F/.r$enc0(!$O\.J7Trel3uT"B
X8o@&$:dU%H$O7"9-FTJnGiq+%4k^fG&q_'-70)u!5njE2`FfI@TY]R)$^E:!"0,@+\5.2?!T]8*!k[,
gAhR<2,[^c;`H`S#7'c!$OR4a6pt3\=?RWD#gWL.!")4dCO(2B91pE7$1S!'%1Ojm>BY(/;^Ngu^]4^#
2cjHt=?AS^#7'o%r;[34$6_r2?X6r&*#o7"!"(S@;I*R,3&hc\#Oqd%$47qE6s<\p4WGFIq>c*Ih>dmM
6YL^hDbs7T#mp,%$OmOq>?c8lF&aP6$HrMC!"(S@;dj*<5!Bnj#Oqd%$47nH87,Y.66$sN^]4]s1/D.[
<BNA_#7'c!$OR4`6pt3\=?dcF#bD%.!"(YD>%VAS6:)^u#Oqd%%1Ojm>BY%-;^E^smf:c9$7[Mq;Gp1F
1_p5unGiq($6_r2?X-i$*#o7:!9jIj-n%GX:.R)o('Om3!"0,@+[e_%='%O)*!j@\QiIIP2d0g*?p[1$
#7'r&qu@*6%4k^fG&hV%,p`o6!"(2*7oE5Y1c,sO"n;R#$47qI87,V,5TCaLqZ+V9$7I;i:/4>70bsor
nGiq($6_f*>$"cg*#o7F!.k4C!"'hk3^cA"-n#]1"7cF#!Y>ns?!VVlDb_H!$,?NI(`4e]2)$'m%KZV3
nc0(!$k+CR8mbb*4;f"A^]4]Y(b.<t/fl&C!Wqom"p#)>,=Y.+"]\P`)&W[8!7:cP%1O0r*ZG\'#4MU$
!tu>*?sn.nCI]Ee#MB+@!!io=',D>t%1NI0!"8o>%k(+F?WU;f()@(j!"&]+$47C]()./c"RlC"!Y,\f
84Zo^;Df4*"fhX+!!j#C)'0h<&J56:!"8rC'/a0*G&(k`*ZbRa!6"pD$47F^().2e"RlC"!Y5ei9MAep
=#Um1"m#a>!!io=&f)5s$k*:.!"8o=%OXe<>#J6U()@)!!/gg_!WiQ2#6k84!:Tss!u;Y5@UaLoBL3XW
#/C3D!<E<,"U"l.mf3Lm&J6Qh:'P'(;`#1&"Mb!B!<E<,"U"l.mf3at%hC-^8m5"d0bb<)nGn.@blA.V
)B(hOATVEl4;\n<_Z8`t$j74W0i:eS:JWSU&d,38qZ%$-',)um9j(+^/.iHrPlRfa$jIUg5@nDJ@q.V<
(^/t$_#OlH',*)t;-m$o/eSd!cN)St$j74W/ko&C91pfJ&HffKJcPcM$je!t88;m\?!T9"&d,!2$jRRb
3)rsa8kLH@%KcJ,XT/b7(Deu,;-6:W-4LCcirFZ2h#Iod!Y$S-<,lnr;c>%O$Nd^9oDf@%!=Bnj6!IPs
5X6=r#m$t)#lt&6+!3[I<`M9c4WOh8!J^Zd!"K&3%4N`*EH,nq;^Vq\!n[M#!"K#1$6L?U>?b8r5TL.;
!Pnd"!"K#1$6L?R<`W3`4WOh8!NH."!!!0$$3(/#!"B#4'fIsVF)u"^6QHC:q>e>3!!E3*rr_ln%0?SB
.4Ikp>uNU<('Om%!8%8O"9&Q*"7uR&!Wil[-Uq3?:GO[?"U3*MM#[__";)Xp*"`2`"SDa(#6u586=t7Y
?8a\V!s?19#Qk/<()@Vo%0Q8'#R(AH1c/*8>Y5,J.1cO^]Dr3>!t5nZ'FYBPo`,F)"V`[G:01Ld-RTE+
!q-,@!9F1d"9];W*?5Y'"SDa(#6u586=t7Y?8a\V!s?@>qu@!)!t?"]'b(TSo`,F)"VijN;I!I!.4Gf0
!k\L=!s8rH'bh&b"8Dlq!"B)8'JV=;='%j=-P$7[P5rK##m(SH,<ItH+!1j`!!NE5%4>"Mrb_m:-RT?)
!os@8!!rZ6$QCZL.i0!-p&G6s$47e<5Q4dh591aO!<LFFnGijr$47_&.k)8N#ke6%!=B/S4[&dD"[*kH
$3:19!2';u#ot$K;c?+0,7=,E#Qtq[3*op2A7Pd-)]K$o!!rlG(+qj;2B*S@p&GL'&J6Nc8m>+g1)(E+
mJtN4#mV1[/3Q-Q)]K(V!"8r@&1L(<<_Q1?'GL`&!.k4K!!rrP*B[8!73a#ap&GL((Df&;??'Ld5T:XI
])W-B()AMf5W0Q##l+K"!"8rA&M$IG>>S-O'GL__!!rlF'eDL21`IA>p&GL'&.g9[7TN2V0,,*(q>c*I
gAhTd#8]0P:g$pd*?>C[!"K&3%4*;nBk_Hc<\G$s"3^c9!"/r6&LJhg7Rf-K('XI5%KQS;*#q%><*;UW
,7P(`]`8ED"V;t+4@2@f'bpoI!"K#1$61$F:f(+V5U$UF!i>t%!"0\`0M>&D:f&eY'*J"0%0d"R3]^Sc
Ddkss*=3&G!65'I',)WQ4%VV",7b:dp](a+";37:8m5Cn1,9UM#N#O<!"0GR,<.YO4?Oet%KcD*%0QeG
.Omnf<D"nt'aFub!0$sc)B(;&93b:i0,#!!"8Dj*"pPo*3aQ`C@R*1!#mn6E$PO1!4$-"t4sLRK!r)a(
"9]>g/4s)L:,4R?#65"A!"0GR,<.YO4?Oet%KcD*%0QeG.Omnf<D"nt'aG!0!.k48!"(bJ:L.7-4?OSi
$2=K(!Y,\g:J^t("]-^"&-E$J!"/cX/3QTt74p2-#7(#("T\u=*^)[c<!>H.+:J;Q]Dr9g.Q^*h5qFQ$
#7(#(!<EN0$6D8jr_Nb\+<V$n!fm?$!")n5?<:2n+sIHt!r)a(#ojpK?sm_R>;mB9#2T@9!")4d8ju0(
)B&q`!VcX'#8It-9MAGW81G5b"NLN7!")(\7R9<n)B&q`!VcX'#8@k)84ZTG6mrWZ"L%m$!")n5?<:2n
+sIHt!r)a(#ojpK?sm_R>;mB9#.adA7n60?75>c"$3:2&!"9)I'ei<T<CfY1&eY?4!7:cR6UO=/5qa,p
$3:2&!"9)H'J;pI;+*f#&J5/p!.k1X!!$/):-(E[&.es=!"K2;(,7ODBP:d>5p-OC!kJ@;7RfKk//ep*
!r)`s"9];E,pblV;bSu'(^UKL\c<"&696SG)@HoSp](d,":lb'5>P'G0JF=M#m'`"JcOR+#<4[k)B'%e
"8Dj"";)4o8kT(k"\:!g&-E$T!:p0q.k;YS'++dBp](I"%1O@=3W;_V3#s"J!Won4#Uq2D',(]S!W`#r
"To/A*]H%W8Hh!m*=DoMR/jbt#<4[k)B'%e"8Dj"";)4o8kT(k"\:!g&-E%"!71]N.k;YS'++dBp](I"
%1O@=3W;_V3#s"J!WpgNk5Y`9.39-9$3C;(!!NH5$m%>dr^d8O*?>Lh!k\N!!!O/T%L*+=p](Eu!Y$=t
#sqm%?V=$C',(MX!!NrH$NpS5p](d)!=B_`1eC834$+Sr%g2G(_uKrP&./OC!VcX)!<ENG)DOZL7lWIO
%LrTs!.k4A!!39+!qcO&#6u2/3`]Nl8h;M/"pVL9!WrN*o`,F)"V`L=6qU'3+X%F#"L\:3!s8Ss!!`Z2
'IkRt7RdP?+X%@!"Gd&u!!39+!qcO&#6u2/3`]Nl8h;M/"pW`\h>dTZ!s/&p%0ZnL/1a1]8i\%<&Hi6R
!;-<n!s8Ss!"B)8'IkRt7Rf<[+V+\YWrSFc$j$nK-V$[-84Y9I('aU8XT/b1$O[t62afVb+V>:hirI!t
$ip\B*Ao]>2Du]h%g:)VJcP?A$N^eJ,s=CU.k;A>#,M;)!=K8T0/#%&"!A0Y"Jl)+!=B/R/M/Rt+:eSX
mJqh=cN"=S%LsdJ4[1GI('XuY!9O7h!=K8T0/#%&+;"_ZW;uks$NUSA*%``p+<V0t"Hibc!!if7(EjqD
',(T/!5\^A"U,JU)&Eeo"Ng_t!!i`3&/c?%%LrWJ!/LUY!WiT7$OZn:T`>;u!<ic9#Qk1q!4Dk4!<E?1
#m^V8eGt1$j8]Dd!XB)@$3UL0!;ca$!<E?1#m^V8T`>;u!<ic9#Qk2(!.k3b!<3,@!7_)L!O)Rj!<3(f
!.k3&!.k3.!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&
!.k3&!.k3.!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&
!.k3&!.k3.!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&
!.k3&!.k3.!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&
!.k3&!.k3.!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&
!.k3&!.k3.!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k30!.Y~>

%%EndBinary
grestore
np
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: PBGSHY+#cb#ce#cc#e5-GBK-EUC-H-Identity-H Initial
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.
%%DocumentNeededResources: ProcSet (CIDInit)
%%IncludeResource: ProcSet (CIDInit)
%%BeginResource: CIDFont (PBGSHY+#cb#ce#cc#e5-GBK-EUC-H)
%%Title: (PBGSHY+#cb#ce#cc#e5-GBK-EUC-H Adobe Identity 0)
%%Version: 0
/CIDInit /ProcSet findresource begin
14 dict begin
/CIDFontName /PBGSHY+#cb#ce#cc#e5-GBK-EUC-H def
/CIDFontType 0 def
/CIDSystemInfo 3 dict dup begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
end def
/FontBBox {-8 -145 1000 859} def
/FontInfo 4 dict dup begin
/FSType 8 def
end def
/CIDMapOffset 57 def
/FDBytes 1 def
/GDBytes 1 def
/CIDCount 28762 def
/CDevProc {pop pop pop pop pop 0 -1000 7 index 2 div 880} def
/FDArray 1 array
dup 0
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 7 dict dup begin
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
def
/GlyphDirectory 2 dict def
ct_GlyphDirProcs begin
GlyphDirectory
+
0 <001C60D8A8C9B5EE31F4> |
93 <001C60D8A8C9B7A73DB690C06B56362BA0450165C55096F8AE2CFB68CA76
20A8C22BF3F70E4187882E3E025AE5E1E2485EB2EB5B67ECE9462A67A51597D5
34AA67939843B849741CD14ADD6925F9A84FDF> |
!
end
ct_AddStdCIDMap
%%EndResource
ct_restoreCIDInit /PBGSHY+#cb#ce#cc#e5-GBK-EUC-H-Identity-H /Identity-H 0 [/PBGSHY+#cb#ce#cc#e5-GBK-EUC-H] ct_ComposeFont pop end end
%ADOEndSubsetFont
/PBGSHY+#cb#ce#cc#e5-GBK-EUC-H-Identity-H findfont [18 0 0 -18 0 0 ]msf
350.52 229.51 mo
(\000])sh
/PBGSHY+#cb#ce#cc#e5-GBK-EUC-H-Identity-H findfont [18 0 0 -18 0 0 ]msf
350.52 229.51 mo
(\000]) false chp
.51429 lw
@
%ADOBeginSubsetFont: PBGSHY+#cb#ce#cc#e5-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/PBGSHY+#cb#ce#cc#e5-GBK-EUC-H 1 GetGlyphDirectory
11 <001C60D8A8C9B7A73DB6FF40517F96FDA56DF770D5AB2E35EB5139177FED
19AED2BBCA94D25E62816A4BB361A14E7AF2F3D07CCA4976924145BE9ECCF42B
691C8EB53762215C5B752B249D> |
!
end
end end
%ADOEndSubsetFont
/PBGSHY+#cb#ce#cc#e5-GBK-EUC-H-Identity-H findfont [18 0 0 -18 0 0 ]msf
359.64 229.51 mo
(\000\013)sh
/PBGSHY+#cb#ce#cc#e5-GBK-EUC-H-Identity-H findfont [18 0 0 -18 0 0 ]msf
359.64 229.51 mo
(\000\013) false chp
@
%ADOBeginSubsetFont: PBGSHY+#cb#ce#cc#e5-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/PBGSHY+#cb#ce#cc#e5-GBK-EUC-H 1 GetGlyphDirectory
70 <001C60D8A8C9B7A73DB9CA3CB59A9362C567E6693756DF87B8701FBEA898
1D0FB41BC57FB14082E0302C46C467D65EA7EED5997CA9CC4C07D177F85EA614
2B8109737791C7B75F03EC4D414D20766F94E802E055EF0E5AF698799D84806F
83F6347388411C500D7944BE94549DBBADCD7CDD5F3B250E41D2BDB64BE408C8
8E0783A9CB9044EA5B4469936D654710860D0CE082D416E670610318DCB9A758
B604E445D057A118ED8BE989140932> |
!
end
end end
%ADOEndSubsetFont
/PBGSHY+#cb#ce#cc#e5-GBK-EUC-H-Identity-H findfont [18 0 0 -18 0 0 ]msf
368.76 229.51 mo
(\000F)sh
/PBGSHY+#cb#ce#cc#e5-GBK-EUC-H-Identity-H findfont [18 0 0 -18 0 0 ]msf
368.76 229.51 mo
(\000F) false chp
@
%ADOBeginSubsetFont: PBGSHY+#cb#ce#cc#e5-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/PBGSHY+#cb#ce#cc#e5-GBK-EUC-H 1 GetGlyphDirectory
12 <001C60D8A8C9B7A73DB9634681296F8CD01FDEF8A610947E91058A48A9E7
9274F05B04949618A6C12665FD74F239E66D051B6D6E1BE1349F56553E67DA23
0FCC4A903B788CEC8F0182D1531D8023> |
!
end
end end
%ADOEndSubsetFont
/PBGSHY+#cb#ce#cc#e5-GBK-EUC-H-Identity-H findfont [18 0 0 -18 0 0 ]msf
377.88 229.51 mo
(\000\014)sh
/PBGSHY+#cb#ce#cc#e5-GBK-EUC-H-Identity-H findfont [18 0 0 -18 0 0 ]msf
377.88 229.51 mo
(\000\014) false chp
@
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
/PBGSHX+Calibri,Bold*1 uf
/PBGSHX+Calibri,Bold uf
/PBAAAA+Calibri,Bold uf
/PBGSHY+#cb#ce#cc#e5-GBK-EUC-H-Identity-H uf
/PBGSHY+#cb#ce#cc#e5-GBK-EUC-H /CIDFont ur
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
showpage
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
